
Blinky.axf:     file format elf32-littlearm


Disassembly of section .flash:

08000000 <Reset_Handler-0x188>:
 8000000:	20020000 	.word	0x20020000
 8000004:	08000189 	.word	0x08000189
 8000008:	08000205 	.word	0x08000205
 800000c:	08000207 	.word	0x08000207
 8000010:	08000209 	.word	0x08000209
 8000014:	08000213 	.word	0x08000213
 8000018:	0800021d 	.word	0x0800021d
	...
 800002c:	0800021f 	.word	0x0800021f
 8000030:	08000221 	.word	0x08000221
 8000034:	00000000 	.word	0x00000000
 8000038:	08000223 	.word	0x08000223
 800003c:	08000227 	.word	0x08000227
 8000040:	08000225 	.word	0x08000225
 8000044:	08000225 	.word	0x08000225
 8000048:	08000225 	.word	0x08000225
 800004c:	08000225 	.word	0x08000225
 8000050:	08000225 	.word	0x08000225
 8000054:	08000225 	.word	0x08000225
 8000058:	08000225 	.word	0x08000225
 800005c:	08000225 	.word	0x08000225
 8000060:	08000225 	.word	0x08000225
 8000064:	08000225 	.word	0x08000225
 8000068:	08000225 	.word	0x08000225
 800006c:	08000225 	.word	0x08000225
 8000070:	08000225 	.word	0x08000225
 8000074:	08000225 	.word	0x08000225
 8000078:	08000225 	.word	0x08000225
 800007c:	08000225 	.word	0x08000225
 8000080:	08000225 	.word	0x08000225
 8000084:	08000225 	.word	0x08000225
 8000088:	08000225 	.word	0x08000225
 800008c:	08000225 	.word	0x08000225
 8000090:	08000225 	.word	0x08000225
 8000094:	08000225 	.word	0x08000225
 8000098:	08000225 	.word	0x08000225
 800009c:	08000225 	.word	0x08000225
 80000a0:	08000225 	.word	0x08000225
 80000a4:	08000225 	.word	0x08000225
 80000a8:	08000225 	.word	0x08000225
 80000ac:	08000225 	.word	0x08000225
 80000b0:	08000225 	.word	0x08000225
 80000b4:	0800022f 	.word	0x0800022f
 80000b8:	08000225 	.word	0x08000225
 80000bc:	08000225 	.word	0x08000225
 80000c0:	08000225 	.word	0x08000225
 80000c4:	08000225 	.word	0x08000225
 80000c8:	08000225 	.word	0x08000225
 80000cc:	08000225 	.word	0x08000225
 80000d0:	08000225 	.word	0x08000225
 80000d4:	08000225 	.word	0x08000225
 80000d8:	08000225 	.word	0x08000225
 80000dc:	08000225 	.word	0x08000225
 80000e0:	08000225 	.word	0x08000225
 80000e4:	08000225 	.word	0x08000225
 80000e8:	08000225 	.word	0x08000225
 80000ec:	08000225 	.word	0x08000225
 80000f0:	08000225 	.word	0x08000225
 80000f4:	08000225 	.word	0x08000225
 80000f8:	08000225 	.word	0x08000225
 80000fc:	08000225 	.word	0x08000225
 8000100:	08000225 	.word	0x08000225
 8000104:	08000225 	.word	0x08000225
 8000108:	08000225 	.word	0x08000225
 800010c:	08000225 	.word	0x08000225
 8000110:	08000225 	.word	0x08000225
 8000114:	08000225 	.word	0x08000225
 8000118:	08000225 	.word	0x08000225
 800011c:	08000225 	.word	0x08000225
 8000120:	08000225 	.word	0x08000225
 8000124:	08000225 	.word	0x08000225
 8000128:	08000225 	.word	0x08000225
 800012c:	08000225 	.word	0x08000225
 8000130:	08000225 	.word	0x08000225
 8000134:	08000225 	.word	0x08000225
 8000138:	08000225 	.word	0x08000225
 800013c:	08000225 	.word	0x08000225
 8000140:	08000225 	.word	0x08000225
 8000144:	08000225 	.word	0x08000225
 8000148:	08000225 	.word	0x08000225
 800014c:	08000225 	.word	0x08000225
 8000150:	08000225 	.word	0x08000225
 8000154:	08000225 	.word	0x08000225
 8000158:	08000225 	.word	0x08000225
 800015c:	08000225 	.word	0x08000225
 8000160:	08000225 	.word	0x08000225
 8000164:	08000225 	.word	0x08000225
 8000168:	08000225 	.word	0x08000225
 800016c:	08000225 	.word	0x08000225
 8000170:	08000225 	.word	0x08000225
 8000174:	08000225 	.word	0x08000225
 8000178:	08000225 	.word	0x08000225
 800017c:	00000000 	.word	0x00000000
 8000180:	08000225 	.word	0x08000225
 8000184:	08000225 	.word	0x08000225

08000188 <Reset_Handler>:
Reset_Handler:				@; @; start-from-reset code; initialize hardware and system data, launch main()
	@; copy .data section (initialized data) from flash to RAM (currently we must do this in each source file)
	@; (!!todo: figure out how we can get the compiler/asembler/linker to place constants in .rodata, etc)
	
copy_data:	
	ldr r1, DATA_BEG
 8000188:	491a      	ldr	r1, [pc, #104]	; (80001f4 <DATA_BEG>)
	ldr r2, TEXT_END
 800018a:	4a19      	ldr	r2, [pc, #100]	; (80001f0 <TEXT_END>)
	ldr r3, DATA_END
 800018c:	4b1a      	ldr	r3, [pc, #104]	; (80001f8 <DATA_END>)
	subs r3, r3, r1			@; length of initialized data
 800018e:	1a5b      	subs	r3, r3, r1
	beq zero_bss			@; skip if none
 8000190:	f000 8007 	beq.w	80001a2 <zero_bss>

08000194 <copy_data_loop>:
copy_data_loop: 
	ldrb r4,[r2], #1		@; read byte from flash
 8000194:	f812 4b01 	ldrb.w	r4, [r2], #1
	strb r4, [r1], #1  		@; store byte to RAM
 8000198:	f801 4b01 	strb.w	r4, [r1], #1
	subs r3, r3, #1  		@; decrement counter
 800019c:	3b01      	subs	r3, #1
	bgt copy_data_loop		@; repeat until done
 800019e:	f73f aff9 	bgt.w	8000194 <copy_data_loop>

080001a2 <zero_bss>:

	@; zero out .bss section (uninitialized data) (currently we must do this in each source file)
	@; (!!todo: figure out how to get the linker to give us the extents of the merged .bss sections)
zero_bss: 	
	ldr r1, BSS_BEG
 80001a2:	4916      	ldr	r1, [pc, #88]	; (80001fc <BSS_BEG>)
	ldr r3, BSS_END
 80001a4:	4b16      	ldr	r3, [pc, #88]	; (8000200 <BSS_END>)
	subs r3, r3, r1			@; Length of uninitialized data
 80001a6:	1a5b      	subs	r3, r3, r1
	beq other_inits		@; Skip if none	!!wmh taking these out initially for USB development
 80001a8:	f000 8007 	beq.w	80001ba <other_inits>
	mov r2, #0				@; value to initialize .bss with
 80001ac:	f04f 0200 	mov.w	r2, #0

080001b0 <zero_bss_loop>:
zero_bss_loop: 	
	strb r2, [r1],#1		@; Store zero
 80001b0:	f801 2b01 	strb.w	r2, [r1], #1
	subs r3, r3, #1			@; Decrement counter
 80001b4:	3b01      	subs	r3, #1
	bgt zero_bss_loop		@; Repeat until done
 80001b6:	f73f affb 	bgt.w	80001b0 <zero_bss_loop>

080001ba <other_inits>:

	@;other inits
other_inits:
	bl P24_init
 80001ba:	f000 f843 	bl	8000244 <P24_init>
	@; misc. definitions to enable BusFault and MemManageFault exceptions for diagnostics (defined in "STM32F4_P24v04_definitionsxx.inc"
@;.equ SHCRS,0xE000ED24	@;System handler control and state register in "+ARM_Cortex-M4_user_guide_DUI0553A_cortex_m4_dgug.pdf", Table 4-12 Summary of the system control block registers
@;.equ BUSFAULTENA, 17 	@; BusFault enable bit: set to 1 to enable (in "" 4.3.9 System Handler Control and State Register)
@;.equ MEMFAULTENA, 16	@; MemManage enable bit, set to 1 to enable(in "" 4.3.9 System Handler Control and State Register)

	SET_bit SHCRS,17 	@;BusFault enable
 80001be:	f64e 5224 	movw	r2, #60708	; 0xed24
 80001c2:	f2ce 0200 	movt	r2, #57344	; 0xe000
 80001c6:	6811      	ldr	r1, [r2, #0]
 80001c8:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80001cc:	6011      	str	r1, [r2, #0]
	SET_bit SHCRS,16 	@;MemFault enable
 80001ce:	f64e 5224 	movw	r2, #60708	; 0xed24
 80001d2:	f2ce 0200 	movt	r2, #57344	; 0xe000
 80001d6:	6811      	ldr	r1, [r2, #0]
 80001d8:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80001dc:	6011      	str	r1, [r2, #0]

080001de <call_main>:

	@;here with everything set up and ready to go
	
	@exit to main (wont return)
call_main:
	bl.W (0x08010000+1)
 80001de:	f00f ff0f 	bl	8010000 <__sidata+0xd3b0>
	mov	r0, #0				@; argc=0
 80001e2:	f04f 0000 	mov.w	r0, #0
	mov r1, #0				@; argv=NULL
 80001e6:	f04f 0100 	mov.w	r1, #0
	bl	main 				@; gone
 80001ea:	f002 f99d 	bl	8002528 <main>
	b .						@; trap if return
 80001ee:	e7fe      	b.n	80001ee <call_main+0x10>

080001f0 <TEXT_END>:
 80001f0:	08002c50 	.word	0x08002c50

080001f4 <DATA_BEG>:
 80001f4:	20000000 	.word	0x20000000

080001f8 <DATA_END>:
 80001f8:	20000054 	.word	0x20000054

080001fc <BSS_BEG>:
 80001fc:	20000054 	.word	0x20000054

08000200 <BSS_END>:
 8000200:	200002d4 	.word	0x200002d4

08000204 <NMI_Handler>:
/* This is how the lazy guy doing it: by aliasing all the
 * interrupts into single address
 */
	.thumb_func
NMI_Handler:
	b .	@;trap here
 8000204:	e7fe      	b.n	8000204 <NMI_Handler>

08000206 <HardFault_Handler>:
	.thumb_func
HardFault_Handler:
	b .	@;trap here
 8000206:	e7fe      	b.n	8000206 <HardFault_Handler>

08000208 <MemManage_Handler>:
	
	.thumb_func
MemManage_Handler:	@;increment diagnostic count of the number of memory manage exceptions for FSMC testing
@;	.extern MemManage_count	!!wmh taking these out initially for USB development
@;	ldr r3,=MemManage_count	!!wmh taking these out initially for USB development
	ldr r0,[r3]
 8000208:	6818      	ldr	r0, [r3, #0]
	add r0,#1
 800020a:	f100 0001 	add.w	r0, r0, #1
	str r0,[r3]
 800020e:	6018      	str	r0, [r3, #0]
	bx lr
 8000210:	4770      	bx	lr

08000212 <BusFault_Handler>:
	
	.thumb_func
BusFault_Handler:	@;increment diagnostic count of the number of bus fault exceptions for FSMC testing
@;	.extern BusFault_count	!!wmh taking these out initially for USB development
@;	ldr r3,=BusFault_count	!!wmh taking these out initially for USB development
	ldr r0,[r3]
 8000212:	6818      	ldr	r0, [r3, #0]
	add r0,#1
 8000214:	f100 0001 	add.w	r0, r0, #1
	str r0,[r3]
 8000218:	6018      	str	r0, [r3, #0]
	bx lr
 800021a:	4770      	bx	lr

0800021c <UsageFault_Handler>:

	.thumb_func
UsageFault_Handler:
	b .	@;trap here
 800021c:	e7fe      	b.n	800021c <UsageFault_Handler>

0800021e <SVC_Handler>:
	.thumb_func
SVC_Handler:
	b .	@;trap here
 800021e:	e7fe      	b.n	800021e <SVC_Handler>

08000220 <DebugMon_Handler>:
	.thumb_func
DebugMon_Handler:
	b .	@;trap here
 8000220:	e7fe      	b.n	8000220 <DebugMon_Handler>

08000222 <PendSV_Handler>:
	.thumb_func
PendSV_Handler:
	b .	@;trap here
 8000222:	e7fe      	b.n	8000222 <PendSV_Handler>

08000224 <ADC_IRQHandler>:
	
	.thumb_func
Default_Handler:	@;destiation for stolen interrupt vectors above
	@;b .	@;trap here
	bx lr
 8000224:	4770      	bx	lr

08000226 <SysTick_Handler>:


	.thumb_func
SysTick_Handler:
	push {lr}
 8000226:	b500      	push	{lr}
	@;bl DMA1Stream5int_svc
@;	bl update_disp	!!wmh taking these out initially for USB development
	pop {lr}
 8000228:	f85d eb04 	ldr.w	lr, [sp], #4
	bx lr
 800022c:	4770      	bx	lr

0800022e <TIM3_IRQHandler>:


	.thumb_func
TIM3_IRQHandler:
	push {lr}
 800022e:	b500      	push	{lr}
	bl synthstuff
 8000230:	f002 fcc6 	bl	8002bc0 <synthstuff>
	@;bl hw8stuff
	@;bl asm_vdisplay
	bl asm_get_switch  @; GHOSTS
 8000234:	f001 fda6 	bl	8001d84 <asm_get_switch>
	bl DMA1Stream5int_svc
 8000238:	f001 fe1e 	bl	8001e78 <DMA1Stream5int_svc>
	pop {lr}
 800023c:	f85d eb04 	ldr.w	lr, [sp], #4
	bx lr
 8000240:	4770      	bx	lr
	...

08000244 <P24_init>:

	.global P24_init
	.thumb_func
P24_init:
	@; DISPLAY PINS OUT
	PORTBIT_init 0,GPIOA_BASE,1		
 8000244:	f240 0200 	movw	r2, #0
 8000248:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800024c:	6811      	ldr	r1, [r2, #0]
 800024e:	f021 010c 	bic.w	r1, r1, #12
 8000252:	6011      	str	r1, [r2, #0]
 8000254:	6811      	ldr	r1, [r2, #0]
 8000256:	f041 0104 	orr.w	r1, r1, #4
 800025a:	6011      	str	r1, [r2, #0]
 800025c:	6851      	ldr	r1, [r2, #4]
 800025e:	f021 0102 	bic.w	r1, r1, #2
 8000262:	6051      	str	r1, [r2, #4]
 8000264:	6891      	ldr	r1, [r2, #8]
 8000266:	f021 010c 	bic.w	r1, r1, #12
 800026a:	6091      	str	r1, [r2, #8]
 800026c:	6891      	ldr	r1, [r2, #8]
 800026e:	f041 0108 	orr.w	r1, r1, #8
 8000272:	6091      	str	r1, [r2, #8]
 8000274:	68d1      	ldr	r1, [r2, #12]
 8000276:	f021 010c 	bic.w	r1, r1, #12
 800027a:	60d1      	str	r1, [r2, #12]
 800027c:	68d1      	ldr	r1, [r2, #12]
 800027e:	f041 0104 	orr.w	r1, r1, #4
 8000282:	60d1      	str	r1, [r2, #12]
	PORTBIT_init 0,GPIOB_BASE,0
 8000284:	f240 4200 	movw	r2, #1024	; 0x400
 8000288:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800028c:	6811      	ldr	r1, [r2, #0]
 800028e:	f021 0103 	bic.w	r1, r1, #3
 8000292:	6011      	str	r1, [r2, #0]
 8000294:	6811      	ldr	r1, [r2, #0]
 8000296:	f041 0101 	orr.w	r1, r1, #1
 800029a:	6011      	str	r1, [r2, #0]
 800029c:	6851      	ldr	r1, [r2, #4]
 800029e:	f021 0101 	bic.w	r1, r1, #1
 80002a2:	6051      	str	r1, [r2, #4]
 80002a4:	6891      	ldr	r1, [r2, #8]
 80002a6:	f021 0103 	bic.w	r1, r1, #3
 80002aa:	6091      	str	r1, [r2, #8]
 80002ac:	6891      	ldr	r1, [r2, #8]
 80002ae:	f041 0102 	orr.w	r1, r1, #2
 80002b2:	6091      	str	r1, [r2, #8]
 80002b4:	68d1      	ldr	r1, [r2, #12]
 80002b6:	f021 0103 	bic.w	r1, r1, #3
 80002ba:	60d1      	str	r1, [r2, #12]
 80002bc:	68d1      	ldr	r1, [r2, #12]
 80002be:	f041 0101 	orr.w	r1, r1, #1
 80002c2:	60d1      	str	r1, [r2, #12]
	PORTBIT_init 0,GPIOB_BASE,1
 80002c4:	f240 4200 	movw	r2, #1024	; 0x400
 80002c8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80002cc:	6811      	ldr	r1, [r2, #0]
 80002ce:	f021 010c 	bic.w	r1, r1, #12
 80002d2:	6011      	str	r1, [r2, #0]
 80002d4:	6811      	ldr	r1, [r2, #0]
 80002d6:	f041 0104 	orr.w	r1, r1, #4
 80002da:	6011      	str	r1, [r2, #0]
 80002dc:	6851      	ldr	r1, [r2, #4]
 80002de:	f021 0102 	bic.w	r1, r1, #2
 80002e2:	6051      	str	r1, [r2, #4]
 80002e4:	6891      	ldr	r1, [r2, #8]
 80002e6:	f021 010c 	bic.w	r1, r1, #12
 80002ea:	6091      	str	r1, [r2, #8]
 80002ec:	6891      	ldr	r1, [r2, #8]
 80002ee:	f041 0108 	orr.w	r1, r1, #8
 80002f2:	6091      	str	r1, [r2, #8]
 80002f4:	68d1      	ldr	r1, [r2, #12]
 80002f6:	f021 010c 	bic.w	r1, r1, #12
 80002fa:	60d1      	str	r1, [r2, #12]
 80002fc:	68d1      	ldr	r1, [r2, #12]
 80002fe:	f041 0104 	orr.w	r1, r1, #4
 8000302:	60d1      	str	r1, [r2, #12]
	PORTBIT_init 0,GPIOB_BASE,5
 8000304:	f240 4200 	movw	r2, #1024	; 0x400
 8000308:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800030c:	6811      	ldr	r1, [r2, #0]
 800030e:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 8000312:	6011      	str	r1, [r2, #0]
 8000314:	6811      	ldr	r1, [r2, #0]
 8000316:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 800031a:	6011      	str	r1, [r2, #0]
 800031c:	6851      	ldr	r1, [r2, #4]
 800031e:	f021 0120 	bic.w	r1, r1, #32
 8000322:	6051      	str	r1, [r2, #4]
 8000324:	6891      	ldr	r1, [r2, #8]
 8000326:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 800032a:	6091      	str	r1, [r2, #8]
 800032c:	6891      	ldr	r1, [r2, #8]
 800032e:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8000332:	6091      	str	r1, [r2, #8]
 8000334:	68d1      	ldr	r1, [r2, #12]
 8000336:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 800033a:	60d1      	str	r1, [r2, #12]
 800033c:	68d1      	ldr	r1, [r2, #12]
 800033e:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8000342:	60d1      	str	r1, [r2, #12]
	PORTBIT_init 0,GPIOB_BASE,11
 8000344:	f240 4200 	movw	r2, #1024	; 0x400
 8000348:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800034c:	6811      	ldr	r1, [r2, #0]
 800034e:	f421 0140 	bic.w	r1, r1, #12582912	; 0xc00000
 8000352:	6011      	str	r1, [r2, #0]
 8000354:	6811      	ldr	r1, [r2, #0]
 8000356:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 800035a:	6011      	str	r1, [r2, #0]
 800035c:	6851      	ldr	r1, [r2, #4]
 800035e:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8000362:	6051      	str	r1, [r2, #4]
 8000364:	6891      	ldr	r1, [r2, #8]
 8000366:	f421 0140 	bic.w	r1, r1, #12582912	; 0xc00000
 800036a:	6091      	str	r1, [r2, #8]
 800036c:	6891      	ldr	r1, [r2, #8]
 800036e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000372:	6091      	str	r1, [r2, #8]
 8000374:	68d1      	ldr	r1, [r2, #12]
 8000376:	f421 0140 	bic.w	r1, r1, #12582912	; 0xc00000
 800037a:	60d1      	str	r1, [r2, #12]
 800037c:	68d1      	ldr	r1, [r2, #12]
 800037e:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 8000382:	60d1      	str	r1, [r2, #12]
	PORTBIT_init 0,GPIOC_BASE,2
 8000384:	f640 0200 	movw	r2, #2048	; 0x800
 8000388:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800038c:	6811      	ldr	r1, [r2, #0]
 800038e:	f021 0130 	bic.w	r1, r1, #48	; 0x30
 8000392:	6011      	str	r1, [r2, #0]
 8000394:	6811      	ldr	r1, [r2, #0]
 8000396:	f041 0110 	orr.w	r1, r1, #16
 800039a:	6011      	str	r1, [r2, #0]
 800039c:	6851      	ldr	r1, [r2, #4]
 800039e:	f021 0104 	bic.w	r1, r1, #4
 80003a2:	6051      	str	r1, [r2, #4]
 80003a4:	6891      	ldr	r1, [r2, #8]
 80003a6:	f021 0130 	bic.w	r1, r1, #48	; 0x30
 80003aa:	6091      	str	r1, [r2, #8]
 80003ac:	6891      	ldr	r1, [r2, #8]
 80003ae:	f041 0120 	orr.w	r1, r1, #32
 80003b2:	6091      	str	r1, [r2, #8]
 80003b4:	68d1      	ldr	r1, [r2, #12]
 80003b6:	f021 0130 	bic.w	r1, r1, #48	; 0x30
 80003ba:	60d1      	str	r1, [r2, #12]
 80003bc:	68d1      	ldr	r1, [r2, #12]
 80003be:	f041 0110 	orr.w	r1, r1, #16
 80003c2:	60d1      	str	r1, [r2, #12]
	PORTBIT_init 0,GPIOC_BASE,4
 80003c4:	f640 0200 	movw	r2, #2048	; 0x800
 80003c8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80003cc:	6811      	ldr	r1, [r2, #0]
 80003ce:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 80003d2:	6011      	str	r1, [r2, #0]
 80003d4:	6811      	ldr	r1, [r2, #0]
 80003d6:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80003da:	6011      	str	r1, [r2, #0]
 80003dc:	6851      	ldr	r1, [r2, #4]
 80003de:	f021 0110 	bic.w	r1, r1, #16
 80003e2:	6051      	str	r1, [r2, #4]
 80003e4:	6891      	ldr	r1, [r2, #8]
 80003e6:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 80003ea:	6091      	str	r1, [r2, #8]
 80003ec:	6891      	ldr	r1, [r2, #8]
 80003ee:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80003f2:	6091      	str	r1, [r2, #8]
 80003f4:	68d1      	ldr	r1, [r2, #12]
 80003f6:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 80003fa:	60d1      	str	r1, [r2, #12]
 80003fc:	68d1      	ldr	r1, [r2, #12]
 80003fe:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8000402:	60d1      	str	r1, [r2, #12]
	PORTBIT_init 0,GPIOC_BASE,5
 8000404:	f640 0200 	movw	r2, #2048	; 0x800
 8000408:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800040c:	6811      	ldr	r1, [r2, #0]
 800040e:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 8000412:	6011      	str	r1, [r2, #0]
 8000414:	6811      	ldr	r1, [r2, #0]
 8000416:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 800041a:	6011      	str	r1, [r2, #0]
 800041c:	6851      	ldr	r1, [r2, #4]
 800041e:	f021 0120 	bic.w	r1, r1, #32
 8000422:	6051      	str	r1, [r2, #4]
 8000424:	6891      	ldr	r1, [r2, #8]
 8000426:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 800042a:	6091      	str	r1, [r2, #8]
 800042c:	6891      	ldr	r1, [r2, #8]
 800042e:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8000432:	6091      	str	r1, [r2, #8]
 8000434:	68d1      	ldr	r1, [r2, #12]
 8000436:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 800043a:	60d1      	str	r1, [r2, #12]
 800043c:	68d1      	ldr	r1, [r2, #12]
 800043e:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8000442:	60d1      	str	r1, [r2, #12]
	
	@; EN/CLK OUT
	PORTBIT_init 0,GPIOD_BASE,2
 8000444:	f640 4200 	movw	r2, #3072	; 0xc00
 8000448:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800044c:	6811      	ldr	r1, [r2, #0]
 800044e:	f021 0130 	bic.w	r1, r1, #48	; 0x30
 8000452:	6011      	str	r1, [r2, #0]
 8000454:	6811      	ldr	r1, [r2, #0]
 8000456:	f041 0110 	orr.w	r1, r1, #16
 800045a:	6011      	str	r1, [r2, #0]
 800045c:	6851      	ldr	r1, [r2, #4]
 800045e:	f021 0104 	bic.w	r1, r1, #4
 8000462:	6051      	str	r1, [r2, #4]
 8000464:	6891      	ldr	r1, [r2, #8]
 8000466:	f021 0130 	bic.w	r1, r1, #48	; 0x30
 800046a:	6091      	str	r1, [r2, #8]
 800046c:	6891      	ldr	r1, [r2, #8]
 800046e:	f041 0120 	orr.w	r1, r1, #32
 8000472:	6091      	str	r1, [r2, #8]
 8000474:	68d1      	ldr	r1, [r2, #12]
 8000476:	f021 0130 	bic.w	r1, r1, #48	; 0x30
 800047a:	60d1      	str	r1, [r2, #12]
 800047c:	68d1      	ldr	r1, [r2, #12]
 800047e:	f041 0110 	orr.w	r1, r1, #16
 8000482:	60d1      	str	r1, [r2, #12]
	PORTBIT_init 0,GPIOC_BASE,11
 8000484:	f640 0200 	movw	r2, #2048	; 0x800
 8000488:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800048c:	6811      	ldr	r1, [r2, #0]
 800048e:	f421 0140 	bic.w	r1, r1, #12582912	; 0xc00000
 8000492:	6011      	str	r1, [r2, #0]
 8000494:	6811      	ldr	r1, [r2, #0]
 8000496:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 800049a:	6011      	str	r1, [r2, #0]
 800049c:	6851      	ldr	r1, [r2, #4]
 800049e:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 80004a2:	6051      	str	r1, [r2, #4]
 80004a4:	6891      	ldr	r1, [r2, #8]
 80004a6:	f421 0140 	bic.w	r1, r1, #12582912	; 0xc00000
 80004aa:	6091      	str	r1, [r2, #8]
 80004ac:	6891      	ldr	r1, [r2, #8]
 80004ae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80004b2:	6091      	str	r1, [r2, #8]
 80004b4:	68d1      	ldr	r1, [r2, #12]
 80004b6:	f421 0140 	bic.w	r1, r1, #12582912	; 0xc00000
 80004ba:	60d1      	str	r1, [r2, #12]
 80004bc:	68d1      	ldr	r1, [r2, #12]
 80004be:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 80004c2:	60d1      	str	r1, [r2, #12]
	PORTBIT_init 0,GPIOC_BASE,1
 80004c4:	f640 0200 	movw	r2, #2048	; 0x800
 80004c8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80004cc:	6811      	ldr	r1, [r2, #0]
 80004ce:	f021 010c 	bic.w	r1, r1, #12
 80004d2:	6011      	str	r1, [r2, #0]
 80004d4:	6811      	ldr	r1, [r2, #0]
 80004d6:	f041 0104 	orr.w	r1, r1, #4
 80004da:	6011      	str	r1, [r2, #0]
 80004dc:	6851      	ldr	r1, [r2, #4]
 80004de:	f021 0102 	bic.w	r1, r1, #2
 80004e2:	6051      	str	r1, [r2, #4]
 80004e4:	6891      	ldr	r1, [r2, #8]
 80004e6:	f021 010c 	bic.w	r1, r1, #12
 80004ea:	6091      	str	r1, [r2, #8]
 80004ec:	6891      	ldr	r1, [r2, #8]
 80004ee:	f041 0108 	orr.w	r1, r1, #8
 80004f2:	6091      	str	r1, [r2, #8]
 80004f4:	68d1      	ldr	r1, [r2, #12]
 80004f6:	f021 010c 	bic.w	r1, r1, #12
 80004fa:	60d1      	str	r1, [r2, #12]
 80004fc:	68d1      	ldr	r1, [r2, #12]
 80004fe:	f041 0104 	orr.w	r1, r1, #4
 8000502:	60d1      	str	r1, [r2, #12]
	PORTBIT_init 0,GPIOB_BASE,4
 8000504:	f240 4200 	movw	r2, #1024	; 0x400
 8000508:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800050c:	6811      	ldr	r1, [r2, #0]
 800050e:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8000512:	6011      	str	r1, [r2, #0]
 8000514:	6811      	ldr	r1, [r2, #0]
 8000516:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800051a:	6011      	str	r1, [r2, #0]
 800051c:	6851      	ldr	r1, [r2, #4]
 800051e:	f021 0110 	bic.w	r1, r1, #16
 8000522:	6051      	str	r1, [r2, #4]
 8000524:	6891      	ldr	r1, [r2, #8]
 8000526:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 800052a:	6091      	str	r1, [r2, #8]
 800052c:	6891      	ldr	r1, [r2, #8]
 800052e:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8000532:	6091      	str	r1, [r2, #8]
 8000534:	68d1      	ldr	r1, [r2, #12]
 8000536:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 800053a:	60d1      	str	r1, [r2, #12]
 800053c:	68d1      	ldr	r1, [r2, #12]
 800053e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8000542:	60d1      	str	r1, [r2, #12]
	
	@; SWITCH OUT
	PORTBIT_init 2,GPIOA_BASE,15
 8000544:	f240 0200 	movw	r2, #0
 8000548:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800054c:	6811      	ldr	r1, [r2, #0]
 800054e:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 8000552:	6011      	str	r1, [r2, #0]
 8000554:	6891      	ldr	r1, [r2, #8]
 8000556:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 800055a:	6091      	str	r1, [r2, #8]
 800055c:	6891      	ldr	r1, [r2, #8]
 800055e:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8000562:	6091      	str	r1, [r2, #8]
 8000564:	68d1      	ldr	r1, [r2, #12]
 8000566:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 800056a:	60d1      	str	r1, [r2, #12]
 800056c:	68d1      	ldr	r1, [r2, #12]
 800056e:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8000572:	60d1      	str	r1, [r2, #12]
	PORTBIT_init 2,GPIOC_BASE,8
 8000574:	f640 0200 	movw	r2, #2048	; 0x800
 8000578:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800057c:	6811      	ldr	r1, [r2, #0]
 800057e:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 8000582:	6011      	str	r1, [r2, #0]
 8000584:	6891      	ldr	r1, [r2, #8]
 8000586:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 800058a:	6091      	str	r1, [r2, #8]
 800058c:	6891      	ldr	r1, [r2, #8]
 800058e:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8000592:	6091      	str	r1, [r2, #8]
 8000594:	68d1      	ldr	r1, [r2, #12]
 8000596:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 800059a:	60d1      	str	r1, [r2, #12]
 800059c:	68d1      	ldr	r1, [r2, #12]
 800059e:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80005a2:	60d1      	str	r1, [r2, #12]
	@;PORTBIT_init 1,GPIOD_BASE,2
	
	@;PORTBIT_write GPIOC_BASE,8,1
	@;PORTBIT_write GPIOA_BASE,15,1
	
	bx lr
 80005a4:	4770      	bx	lr

080005a6 <asm_print_digit>:

	.global asm_print_digit
	.thumb_func
asm_print_digit:
	push {r1}
 80005a6:	b402      	push	{r1}
	
	PORTBIT_write GPIOB_BASE,4,1			@;	01_PB4	AN_EN	-- disable anode   (active-low)
 80005a8:	f240 4200 	movw	r2, #1024	; 0x400
 80005ac:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80005b0:	f04f 0110 	mov.w	r1, #16
 80005b4:	6191      	str	r1, [r2, #24]
	PORTBIT_write GPIOC_BASE,1,1			@;	01_PC1	CA_EN	-- disable cathode (active-low)
 80005b6:	f640 0200 	movw	r2, #2048	; 0x800
 80005ba:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80005be:	f04f 0102 	mov.w	r1, #2
 80005c2:	6191      	str	r1, [r2, #24]

	tbh [pc,r0]
 80005c4:	e8df f010 	tbh	[pc, r0, lsl #1]

080005c8 <TBB_CATHODE_table>:
 80005c8:	00580010 	.word	0x00580010
 80005cc:	00e800a0 	.word	0x00e800a0
 80005d0:	01780130 	.word	0x01780130
 80005d4:	020801c0 	.word	0x020801c0
 80005d8:	02980250 	.word	0x02980250
 80005dc:	032802e0 	.word	0x032802e0
 80005e0:	03b80370 	.word	0x03b80370
 80005e4:	04480400 	.word	0x04480400

080005e8 <cathode_0>:
	.hword ((cathode_E - TBB_CATHODE_table)/2)
	.hword ((cathode_F - TBB_CATHODE_table)/2)

	.thumb_func
cathode_0:
	CATHODE_write 0,0,0,0,0,0,1,1
 80005e8:	f640 0200 	movw	r2, #2048	; 0x800
 80005ec:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80005f0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80005f4:	6191      	str	r1, [r2, #24]
 80005f6:	f240 4200 	movw	r2, #1024	; 0x400
 80005fa:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80005fe:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8000602:	6191      	str	r1, [r2, #24]
 8000604:	f240 0200 	movw	r2, #0
 8000608:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800060c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8000610:	6191      	str	r1, [r2, #24]
 8000612:	f240 4200 	movw	r2, #1024	; 0x400
 8000616:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800061a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800061e:	6191      	str	r1, [r2, #24]
 8000620:	f240 4200 	movw	r2, #1024	; 0x400
 8000624:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000628:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800062c:	6191      	str	r1, [r2, #24]
 800062e:	f640 0200 	movw	r2, #2048	; 0x800
 8000632:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000636:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800063a:	6191      	str	r1, [r2, #24]
 800063c:	f640 0200 	movw	r2, #2048	; 0x800
 8000640:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000644:	f04f 0110 	mov.w	r1, #16
 8000648:	6191      	str	r1, [r2, #24]
 800064a:	f240 4200 	movw	r2, #1024	; 0x400
 800064e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000652:	f04f 0101 	mov.w	r1, #1
 8000656:	6191      	str	r1, [r2, #24]
 8000658:	f640 4200 	movw	r2, #3072	; 0xc00
 800065c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000660:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8000664:	6191      	str	r1, [r2, #24]
 8000666:	f640 4200 	movw	r2, #3072	; 0xc00
 800066a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800066e:	f04f 0104 	mov.w	r1, #4
 8000672:	6191      	str	r1, [r2, #24]
	b continue
 8000674:	f000 bc38 	b.w	8000ee8 <continue>

08000678 <cathode_1>:

	.thumb_func
cathode_1:
	CATHODE_write 1,0,0,1,1,1,1,1
 8000678:	f640 0200 	movw	r2, #2048	; 0x800
 800067c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000680:	f04f 0120 	mov.w	r1, #32
 8000684:	6191      	str	r1, [r2, #24]
 8000686:	f240 4200 	movw	r2, #1024	; 0x400
 800068a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800068e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8000692:	6191      	str	r1, [r2, #24]
 8000694:	f240 0200 	movw	r2, #0
 8000698:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800069c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80006a0:	6191      	str	r1, [r2, #24]
 80006a2:	f240 4200 	movw	r2, #1024	; 0x400
 80006a6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80006aa:	f04f 0120 	mov.w	r1, #32
 80006ae:	6191      	str	r1, [r2, #24]
 80006b0:	f240 4200 	movw	r2, #1024	; 0x400
 80006b4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80006b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006bc:	6191      	str	r1, [r2, #24]
 80006be:	f640 0200 	movw	r2, #2048	; 0x800
 80006c2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80006c6:	f04f 0104 	mov.w	r1, #4
 80006ca:	6191      	str	r1, [r2, #24]
 80006cc:	f640 0200 	movw	r2, #2048	; 0x800
 80006d0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80006d4:	f04f 0110 	mov.w	r1, #16
 80006d8:	6191      	str	r1, [r2, #24]
 80006da:	f240 4200 	movw	r2, #1024	; 0x400
 80006de:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80006e2:	f04f 0101 	mov.w	r1, #1
 80006e6:	6191      	str	r1, [r2, #24]
 80006e8:	f640 4200 	movw	r2, #3072	; 0xc00
 80006ec:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80006f0:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 80006f4:	6191      	str	r1, [r2, #24]
 80006f6:	f640 4200 	movw	r2, #3072	; 0xc00
 80006fa:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80006fe:	f04f 0104 	mov.w	r1, #4
 8000702:	6191      	str	r1, [r2, #24]
	b continue
 8000704:	f000 bbf0 	b.w	8000ee8 <continue>

08000708 <cathode_2>:
	
	.thumb_func
cathode_2:
	CATHODE_write 0,0,1,0,0,1,0,1
 8000708:	f640 0200 	movw	r2, #2048	; 0x800
 800070c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000710:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8000714:	6191      	str	r1, [r2, #24]
 8000716:	f240 4200 	movw	r2, #1024	; 0x400
 800071a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800071e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8000722:	6191      	str	r1, [r2, #24]
 8000724:	f240 0200 	movw	r2, #0
 8000728:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800072c:	f04f 0102 	mov.w	r1, #2
 8000730:	6191      	str	r1, [r2, #24]
 8000732:	f240 4200 	movw	r2, #1024	; 0x400
 8000736:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800073a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800073e:	6191      	str	r1, [r2, #24]
 8000740:	f240 4200 	movw	r2, #1024	; 0x400
 8000744:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000748:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800074c:	6191      	str	r1, [r2, #24]
 800074e:	f640 0200 	movw	r2, #2048	; 0x800
 8000752:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000756:	f04f 0104 	mov.w	r1, #4
 800075a:	6191      	str	r1, [r2, #24]
 800075c:	f640 0200 	movw	r2, #2048	; 0x800
 8000760:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000764:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8000768:	6191      	str	r1, [r2, #24]
 800076a:	f240 4200 	movw	r2, #1024	; 0x400
 800076e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000772:	f04f 0101 	mov.w	r1, #1
 8000776:	6191      	str	r1, [r2, #24]
 8000778:	f640 4200 	movw	r2, #3072	; 0xc00
 800077c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000780:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8000784:	6191      	str	r1, [r2, #24]
 8000786:	f640 4200 	movw	r2, #3072	; 0xc00
 800078a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800078e:	f04f 0104 	mov.w	r1, #4
 8000792:	6191      	str	r1, [r2, #24]
	b continue
 8000794:	f000 bba8 	b.w	8000ee8 <continue>

08000798 <cathode_3>:
	
	.thumb_func
cathode_3:
	CATHODE_write 0,0,0,0,1,1,0,1
 8000798:	f640 0200 	movw	r2, #2048	; 0x800
 800079c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80007a0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80007a4:	6191      	str	r1, [r2, #24]
 80007a6:	f240 4200 	movw	r2, #1024	; 0x400
 80007aa:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80007ae:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80007b2:	6191      	str	r1, [r2, #24]
 80007b4:	f240 0200 	movw	r2, #0
 80007b8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80007bc:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80007c0:	6191      	str	r1, [r2, #24]
 80007c2:	f240 4200 	movw	r2, #1024	; 0x400
 80007c6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80007ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80007ce:	6191      	str	r1, [r2, #24]
 80007d0:	f240 4200 	movw	r2, #1024	; 0x400
 80007d4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80007d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007dc:	6191      	str	r1, [r2, #24]
 80007de:	f640 0200 	movw	r2, #2048	; 0x800
 80007e2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80007e6:	f04f 0104 	mov.w	r1, #4
 80007ea:	6191      	str	r1, [r2, #24]
 80007ec:	f640 0200 	movw	r2, #2048	; 0x800
 80007f0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80007f4:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 80007f8:	6191      	str	r1, [r2, #24]
 80007fa:	f240 4200 	movw	r2, #1024	; 0x400
 80007fe:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000802:	f04f 0101 	mov.w	r1, #1
 8000806:	6191      	str	r1, [r2, #24]
 8000808:	f640 4200 	movw	r2, #3072	; 0xc00
 800080c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000810:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8000814:	6191      	str	r1, [r2, #24]
 8000816:	f640 4200 	movw	r2, #3072	; 0xc00
 800081a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800081e:	f04f 0104 	mov.w	r1, #4
 8000822:	6191      	str	r1, [r2, #24]
	b continue
 8000824:	f000 bb60 	b.w	8000ee8 <continue>

08000828 <cathode_4>:
	
	.thumb_func
cathode_4:
	CATHODE_write 1,0,0,1,1,0,0,1
 8000828:	f640 0200 	movw	r2, #2048	; 0x800
 800082c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000830:	f04f 0120 	mov.w	r1, #32
 8000834:	6191      	str	r1, [r2, #24]
 8000836:	f240 4200 	movw	r2, #1024	; 0x400
 800083a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800083e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8000842:	6191      	str	r1, [r2, #24]
 8000844:	f240 0200 	movw	r2, #0
 8000848:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800084c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8000850:	6191      	str	r1, [r2, #24]
 8000852:	f240 4200 	movw	r2, #1024	; 0x400
 8000856:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800085a:	f04f 0120 	mov.w	r1, #32
 800085e:	6191      	str	r1, [r2, #24]
 8000860:	f240 4200 	movw	r2, #1024	; 0x400
 8000864:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000868:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800086c:	6191      	str	r1, [r2, #24]
 800086e:	f640 0200 	movw	r2, #2048	; 0x800
 8000872:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000876:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800087a:	6191      	str	r1, [r2, #24]
 800087c:	f640 0200 	movw	r2, #2048	; 0x800
 8000880:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000884:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8000888:	6191      	str	r1, [r2, #24]
 800088a:	f240 4200 	movw	r2, #1024	; 0x400
 800088e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000892:	f04f 0101 	mov.w	r1, #1
 8000896:	6191      	str	r1, [r2, #24]
 8000898:	f640 4200 	movw	r2, #3072	; 0xc00
 800089c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80008a0:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 80008a4:	6191      	str	r1, [r2, #24]
 80008a6:	f640 4200 	movw	r2, #3072	; 0xc00
 80008aa:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80008ae:	f04f 0104 	mov.w	r1, #4
 80008b2:	6191      	str	r1, [r2, #24]
	b continue
 80008b4:	f000 bb18 	b.w	8000ee8 <continue>

080008b8 <cathode_5>:
	
	.thumb_func
cathode_5:
	CATHODE_write 0,1,0,0,1,0,0,1
 80008b8:	f640 0200 	movw	r2, #2048	; 0x800
 80008bc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80008c0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80008c4:	6191      	str	r1, [r2, #24]
 80008c6:	f240 4200 	movw	r2, #1024	; 0x400
 80008ca:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80008ce:	f04f 0102 	mov.w	r1, #2
 80008d2:	6191      	str	r1, [r2, #24]
 80008d4:	f240 0200 	movw	r2, #0
 80008d8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80008dc:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80008e0:	6191      	str	r1, [r2, #24]
 80008e2:	f240 4200 	movw	r2, #1024	; 0x400
 80008e6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80008ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80008ee:	6191      	str	r1, [r2, #24]
 80008f0:	f240 4200 	movw	r2, #1024	; 0x400
 80008f4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80008f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008fc:	6191      	str	r1, [r2, #24]
 80008fe:	f640 0200 	movw	r2, #2048	; 0x800
 8000902:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000906:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800090a:	6191      	str	r1, [r2, #24]
 800090c:	f640 0200 	movw	r2, #2048	; 0x800
 8000910:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000914:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8000918:	6191      	str	r1, [r2, #24]
 800091a:	f240 4200 	movw	r2, #1024	; 0x400
 800091e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000922:	f04f 0101 	mov.w	r1, #1
 8000926:	6191      	str	r1, [r2, #24]
 8000928:	f640 4200 	movw	r2, #3072	; 0xc00
 800092c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000930:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8000934:	6191      	str	r1, [r2, #24]
 8000936:	f640 4200 	movw	r2, #3072	; 0xc00
 800093a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800093e:	f04f 0104 	mov.w	r1, #4
 8000942:	6191      	str	r1, [r2, #24]
	b continue
 8000944:	f000 bad0 	b.w	8000ee8 <continue>

08000948 <cathode_6>:

	.thumb_func
cathode_6:
	CATHODE_write 0,1,0,0,0,0,0,1
 8000948:	f640 0200 	movw	r2, #2048	; 0x800
 800094c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000950:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8000954:	6191      	str	r1, [r2, #24]
 8000956:	f240 4200 	movw	r2, #1024	; 0x400
 800095a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800095e:	f04f 0102 	mov.w	r1, #2
 8000962:	6191      	str	r1, [r2, #24]
 8000964:	f240 0200 	movw	r2, #0
 8000968:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800096c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8000970:	6191      	str	r1, [r2, #24]
 8000972:	f240 4200 	movw	r2, #1024	; 0x400
 8000976:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800097a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800097e:	6191      	str	r1, [r2, #24]
 8000980:	f240 4200 	movw	r2, #1024	; 0x400
 8000984:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000988:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800098c:	6191      	str	r1, [r2, #24]
 800098e:	f640 0200 	movw	r2, #2048	; 0x800
 8000992:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000996:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800099a:	6191      	str	r1, [r2, #24]
 800099c:	f640 0200 	movw	r2, #2048	; 0x800
 80009a0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80009a4:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 80009a8:	6191      	str	r1, [r2, #24]
 80009aa:	f240 4200 	movw	r2, #1024	; 0x400
 80009ae:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80009b2:	f04f 0101 	mov.w	r1, #1
 80009b6:	6191      	str	r1, [r2, #24]
 80009b8:	f640 4200 	movw	r2, #3072	; 0xc00
 80009bc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80009c0:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 80009c4:	6191      	str	r1, [r2, #24]
 80009c6:	f640 4200 	movw	r2, #3072	; 0xc00
 80009ca:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80009ce:	f04f 0104 	mov.w	r1, #4
 80009d2:	6191      	str	r1, [r2, #24]
	b continue
 80009d4:	f000 ba88 	b.w	8000ee8 <continue>

080009d8 <cathode_7>:
	
	.thumb_func
cathode_7:
	CATHODE_write 0,0,0,1,1,1,1,1
 80009d8:	f640 0200 	movw	r2, #2048	; 0x800
 80009dc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80009e0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80009e4:	6191      	str	r1, [r2, #24]
 80009e6:	f240 4200 	movw	r2, #1024	; 0x400
 80009ea:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80009ee:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80009f2:	6191      	str	r1, [r2, #24]
 80009f4:	f240 0200 	movw	r2, #0
 80009f8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80009fc:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8000a00:	6191      	str	r1, [r2, #24]
 8000a02:	f240 4200 	movw	r2, #1024	; 0x400
 8000a06:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000a0a:	f04f 0120 	mov.w	r1, #32
 8000a0e:	6191      	str	r1, [r2, #24]
 8000a10:	f240 4200 	movw	r2, #1024	; 0x400
 8000a14:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000a18:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a1c:	6191      	str	r1, [r2, #24]
 8000a1e:	f640 0200 	movw	r2, #2048	; 0x800
 8000a22:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000a26:	f04f 0104 	mov.w	r1, #4
 8000a2a:	6191      	str	r1, [r2, #24]
 8000a2c:	f640 0200 	movw	r2, #2048	; 0x800
 8000a30:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000a34:	f04f 0110 	mov.w	r1, #16
 8000a38:	6191      	str	r1, [r2, #24]
 8000a3a:	f240 4200 	movw	r2, #1024	; 0x400
 8000a3e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000a42:	f04f 0101 	mov.w	r1, #1
 8000a46:	6191      	str	r1, [r2, #24]
 8000a48:	f640 4200 	movw	r2, #3072	; 0xc00
 8000a4c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000a50:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8000a54:	6191      	str	r1, [r2, #24]
 8000a56:	f640 4200 	movw	r2, #3072	; 0xc00
 8000a5a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000a5e:	f04f 0104 	mov.w	r1, #4
 8000a62:	6191      	str	r1, [r2, #24]
	b continue
 8000a64:	f000 ba40 	b.w	8000ee8 <continue>

08000a68 <cathode_8>:
	
	.thumb_func
cathode_8:
	CATHODE_write 0,0,0,0,0,0,0,1
 8000a68:	f640 0200 	movw	r2, #2048	; 0x800
 8000a6c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000a70:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8000a74:	6191      	str	r1, [r2, #24]
 8000a76:	f240 4200 	movw	r2, #1024	; 0x400
 8000a7a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000a7e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8000a82:	6191      	str	r1, [r2, #24]
 8000a84:	f240 0200 	movw	r2, #0
 8000a88:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000a8c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8000a90:	6191      	str	r1, [r2, #24]
 8000a92:	f240 4200 	movw	r2, #1024	; 0x400
 8000a96:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000a9a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8000a9e:	6191      	str	r1, [r2, #24]
 8000aa0:	f240 4200 	movw	r2, #1024	; 0x400
 8000aa4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000aa8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000aac:	6191      	str	r1, [r2, #24]
 8000aae:	f640 0200 	movw	r2, #2048	; 0x800
 8000ab2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000ab6:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8000aba:	6191      	str	r1, [r2, #24]
 8000abc:	f640 0200 	movw	r2, #2048	; 0x800
 8000ac0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000ac4:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8000ac8:	6191      	str	r1, [r2, #24]
 8000aca:	f240 4200 	movw	r2, #1024	; 0x400
 8000ace:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000ad2:	f04f 0101 	mov.w	r1, #1
 8000ad6:	6191      	str	r1, [r2, #24]
 8000ad8:	f640 4200 	movw	r2, #3072	; 0xc00
 8000adc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000ae0:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8000ae4:	6191      	str	r1, [r2, #24]
 8000ae6:	f640 4200 	movw	r2, #3072	; 0xc00
 8000aea:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000aee:	f04f 0104 	mov.w	r1, #4
 8000af2:	6191      	str	r1, [r2, #24]
	b continue
 8000af4:	f000 b9f8 	b.w	8000ee8 <continue>

08000af8 <cathode_9>:
	
	.thumb_func
cathode_9:
	CATHODE_write 0,0,0,1,1,0,0,1
 8000af8:	f640 0200 	movw	r2, #2048	; 0x800
 8000afc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000b00:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8000b04:	6191      	str	r1, [r2, #24]
 8000b06:	f240 4200 	movw	r2, #1024	; 0x400
 8000b0a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000b0e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8000b12:	6191      	str	r1, [r2, #24]
 8000b14:	f240 0200 	movw	r2, #0
 8000b18:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000b1c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8000b20:	6191      	str	r1, [r2, #24]
 8000b22:	f240 4200 	movw	r2, #1024	; 0x400
 8000b26:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000b2a:	f04f 0120 	mov.w	r1, #32
 8000b2e:	6191      	str	r1, [r2, #24]
 8000b30:	f240 4200 	movw	r2, #1024	; 0x400
 8000b34:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000b38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b3c:	6191      	str	r1, [r2, #24]
 8000b3e:	f640 0200 	movw	r2, #2048	; 0x800
 8000b42:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000b46:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8000b4a:	6191      	str	r1, [r2, #24]
 8000b4c:	f640 0200 	movw	r2, #2048	; 0x800
 8000b50:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000b54:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8000b58:	6191      	str	r1, [r2, #24]
 8000b5a:	f240 4200 	movw	r2, #1024	; 0x400
 8000b5e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000b62:	f04f 0101 	mov.w	r1, #1
 8000b66:	6191      	str	r1, [r2, #24]
 8000b68:	f640 4200 	movw	r2, #3072	; 0xc00
 8000b6c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000b70:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8000b74:	6191      	str	r1, [r2, #24]
 8000b76:	f640 4200 	movw	r2, #3072	; 0xc00
 8000b7a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000b7e:	f04f 0104 	mov.w	r1, #4
 8000b82:	6191      	str	r1, [r2, #24]
	b continue
 8000b84:	f000 b9b0 	b.w	8000ee8 <continue>

08000b88 <cathode_A>:
	
	.thumb_func
cathode_A:
	CATHODE_write 0,0,0,1,0,0,0,1
 8000b88:	f640 0200 	movw	r2, #2048	; 0x800
 8000b8c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000b90:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8000b94:	6191      	str	r1, [r2, #24]
 8000b96:	f240 4200 	movw	r2, #1024	; 0x400
 8000b9a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000b9e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8000ba2:	6191      	str	r1, [r2, #24]
 8000ba4:	f240 0200 	movw	r2, #0
 8000ba8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000bac:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8000bb0:	6191      	str	r1, [r2, #24]
 8000bb2:	f240 4200 	movw	r2, #1024	; 0x400
 8000bb6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000bba:	f04f 0120 	mov.w	r1, #32
 8000bbe:	6191      	str	r1, [r2, #24]
 8000bc0:	f240 4200 	movw	r2, #1024	; 0x400
 8000bc4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000bc8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000bcc:	6191      	str	r1, [r2, #24]
 8000bce:	f640 0200 	movw	r2, #2048	; 0x800
 8000bd2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000bd6:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8000bda:	6191      	str	r1, [r2, #24]
 8000bdc:	f640 0200 	movw	r2, #2048	; 0x800
 8000be0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000be4:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8000be8:	6191      	str	r1, [r2, #24]
 8000bea:	f240 4200 	movw	r2, #1024	; 0x400
 8000bee:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000bf2:	f04f 0101 	mov.w	r1, #1
 8000bf6:	6191      	str	r1, [r2, #24]
 8000bf8:	f640 4200 	movw	r2, #3072	; 0xc00
 8000bfc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000c00:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8000c04:	6191      	str	r1, [r2, #24]
 8000c06:	f640 4200 	movw	r2, #3072	; 0xc00
 8000c0a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000c0e:	f04f 0104 	mov.w	r1, #4
 8000c12:	6191      	str	r1, [r2, #24]
	b continue
 8000c14:	f000 b968 	b.w	8000ee8 <continue>

08000c18 <cathode_B>:

	.thumb_func
cathode_B:
	CATHODE_write 1,1,0,0,0,0,0,1
 8000c18:	f640 0200 	movw	r2, #2048	; 0x800
 8000c1c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000c20:	f04f 0120 	mov.w	r1, #32
 8000c24:	6191      	str	r1, [r2, #24]
 8000c26:	f240 4200 	movw	r2, #1024	; 0x400
 8000c2a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000c2e:	f04f 0102 	mov.w	r1, #2
 8000c32:	6191      	str	r1, [r2, #24]
 8000c34:	f240 0200 	movw	r2, #0
 8000c38:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000c3c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8000c40:	6191      	str	r1, [r2, #24]
 8000c42:	f240 4200 	movw	r2, #1024	; 0x400
 8000c46:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000c4a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8000c4e:	6191      	str	r1, [r2, #24]
 8000c50:	f240 4200 	movw	r2, #1024	; 0x400
 8000c54:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000c58:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000c5c:	6191      	str	r1, [r2, #24]
 8000c5e:	f640 0200 	movw	r2, #2048	; 0x800
 8000c62:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000c66:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8000c6a:	6191      	str	r1, [r2, #24]
 8000c6c:	f640 0200 	movw	r2, #2048	; 0x800
 8000c70:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000c74:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8000c78:	6191      	str	r1, [r2, #24]
 8000c7a:	f240 4200 	movw	r2, #1024	; 0x400
 8000c7e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000c82:	f04f 0101 	mov.w	r1, #1
 8000c86:	6191      	str	r1, [r2, #24]
 8000c88:	f640 4200 	movw	r2, #3072	; 0xc00
 8000c8c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000c90:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8000c94:	6191      	str	r1, [r2, #24]
 8000c96:	f640 4200 	movw	r2, #3072	; 0xc00
 8000c9a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000c9e:	f04f 0104 	mov.w	r1, #4
 8000ca2:	6191      	str	r1, [r2, #24]
	b continue
 8000ca4:	f000 b920 	b.w	8000ee8 <continue>

08000ca8 <cathode_C>:
	
	.thumb_func
cathode_C:
	CATHODE_write 0,1,1,0,0,0,1,1
 8000ca8:	f640 0200 	movw	r2, #2048	; 0x800
 8000cac:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000cb0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8000cb4:	6191      	str	r1, [r2, #24]
 8000cb6:	f240 4200 	movw	r2, #1024	; 0x400
 8000cba:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000cbe:	f04f 0102 	mov.w	r1, #2
 8000cc2:	6191      	str	r1, [r2, #24]
 8000cc4:	f240 0200 	movw	r2, #0
 8000cc8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000ccc:	f04f 0102 	mov.w	r1, #2
 8000cd0:	6191      	str	r1, [r2, #24]
 8000cd2:	f240 4200 	movw	r2, #1024	; 0x400
 8000cd6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000cda:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8000cde:	6191      	str	r1, [r2, #24]
 8000ce0:	f240 4200 	movw	r2, #1024	; 0x400
 8000ce4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000ce8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000cec:	6191      	str	r1, [r2, #24]
 8000cee:	f640 0200 	movw	r2, #2048	; 0x800
 8000cf2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000cf6:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8000cfa:	6191      	str	r1, [r2, #24]
 8000cfc:	f640 0200 	movw	r2, #2048	; 0x800
 8000d00:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000d04:	f04f 0110 	mov.w	r1, #16
 8000d08:	6191      	str	r1, [r2, #24]
 8000d0a:	f240 4200 	movw	r2, #1024	; 0x400
 8000d0e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000d12:	f04f 0101 	mov.w	r1, #1
 8000d16:	6191      	str	r1, [r2, #24]
 8000d18:	f640 4200 	movw	r2, #3072	; 0xc00
 8000d1c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000d20:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8000d24:	6191      	str	r1, [r2, #24]
 8000d26:	f640 4200 	movw	r2, #3072	; 0xc00
 8000d2a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000d2e:	f04f 0104 	mov.w	r1, #4
 8000d32:	6191      	str	r1, [r2, #24]
	b continue
 8000d34:	f000 b8d8 	b.w	8000ee8 <continue>

08000d38 <cathode_D>:
	
	.thumb_func
cathode_D:
	CATHODE_write 1,0,0,0,0,1,0,1
 8000d38:	f640 0200 	movw	r2, #2048	; 0x800
 8000d3c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000d40:	f04f 0120 	mov.w	r1, #32
 8000d44:	6191      	str	r1, [r2, #24]
 8000d46:	f240 4200 	movw	r2, #1024	; 0x400
 8000d4a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000d4e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8000d52:	6191      	str	r1, [r2, #24]
 8000d54:	f240 0200 	movw	r2, #0
 8000d58:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000d5c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8000d60:	6191      	str	r1, [r2, #24]
 8000d62:	f240 4200 	movw	r2, #1024	; 0x400
 8000d66:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000d6a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8000d6e:	6191      	str	r1, [r2, #24]
 8000d70:	f240 4200 	movw	r2, #1024	; 0x400
 8000d74:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000d78:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000d7c:	6191      	str	r1, [r2, #24]
 8000d7e:	f640 0200 	movw	r2, #2048	; 0x800
 8000d82:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000d86:	f04f 0104 	mov.w	r1, #4
 8000d8a:	6191      	str	r1, [r2, #24]
 8000d8c:	f640 0200 	movw	r2, #2048	; 0x800
 8000d90:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000d94:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8000d98:	6191      	str	r1, [r2, #24]
 8000d9a:	f240 4200 	movw	r2, #1024	; 0x400
 8000d9e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000da2:	f04f 0101 	mov.w	r1, #1
 8000da6:	6191      	str	r1, [r2, #24]
 8000da8:	f640 4200 	movw	r2, #3072	; 0xc00
 8000dac:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000db0:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8000db4:	6191      	str	r1, [r2, #24]
 8000db6:	f640 4200 	movw	r2, #3072	; 0xc00
 8000dba:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000dbe:	f04f 0104 	mov.w	r1, #4
 8000dc2:	6191      	str	r1, [r2, #24]
	b continue
 8000dc4:	f000 b890 	b.w	8000ee8 <continue>

08000dc8 <cathode_E>:
	
	.thumb_func
cathode_E:
	CATHODE_write 0,1,1,0,0,0,0,1
 8000dc8:	f640 0200 	movw	r2, #2048	; 0x800
 8000dcc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000dd0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8000dd4:	6191      	str	r1, [r2, #24]
 8000dd6:	f240 4200 	movw	r2, #1024	; 0x400
 8000dda:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000dde:	f04f 0102 	mov.w	r1, #2
 8000de2:	6191      	str	r1, [r2, #24]
 8000de4:	f240 0200 	movw	r2, #0
 8000de8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000dec:	f04f 0102 	mov.w	r1, #2
 8000df0:	6191      	str	r1, [r2, #24]
 8000df2:	f240 4200 	movw	r2, #1024	; 0x400
 8000df6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000dfa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8000dfe:	6191      	str	r1, [r2, #24]
 8000e00:	f240 4200 	movw	r2, #1024	; 0x400
 8000e04:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000e08:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000e0c:	6191      	str	r1, [r2, #24]
 8000e0e:	f640 0200 	movw	r2, #2048	; 0x800
 8000e12:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000e16:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8000e1a:	6191      	str	r1, [r2, #24]
 8000e1c:	f640 0200 	movw	r2, #2048	; 0x800
 8000e20:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000e24:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8000e28:	6191      	str	r1, [r2, #24]
 8000e2a:	f240 4200 	movw	r2, #1024	; 0x400
 8000e2e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000e32:	f04f 0101 	mov.w	r1, #1
 8000e36:	6191      	str	r1, [r2, #24]
 8000e38:	f640 4200 	movw	r2, #3072	; 0xc00
 8000e3c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000e40:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8000e44:	6191      	str	r1, [r2, #24]
 8000e46:	f640 4200 	movw	r2, #3072	; 0xc00
 8000e4a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000e4e:	f04f 0104 	mov.w	r1, #4
 8000e52:	6191      	str	r1, [r2, #24]
	b continue
 8000e54:	f000 b848 	b.w	8000ee8 <continue>

08000e58 <cathode_F>:
	
	.thumb_func
cathode_F:
	CATHODE_write 0,1,1,1,0,0,0,1
 8000e58:	f640 0200 	movw	r2, #2048	; 0x800
 8000e5c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000e60:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8000e64:	6191      	str	r1, [r2, #24]
 8000e66:	f240 4200 	movw	r2, #1024	; 0x400
 8000e6a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000e6e:	f04f 0102 	mov.w	r1, #2
 8000e72:	6191      	str	r1, [r2, #24]
 8000e74:	f240 0200 	movw	r2, #0
 8000e78:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000e7c:	f04f 0102 	mov.w	r1, #2
 8000e80:	6191      	str	r1, [r2, #24]
 8000e82:	f240 4200 	movw	r2, #1024	; 0x400
 8000e86:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000e8a:	f04f 0120 	mov.w	r1, #32
 8000e8e:	6191      	str	r1, [r2, #24]
 8000e90:	f240 4200 	movw	r2, #1024	; 0x400
 8000e94:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000e98:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000e9c:	6191      	str	r1, [r2, #24]
 8000e9e:	f640 0200 	movw	r2, #2048	; 0x800
 8000ea2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000ea6:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8000eaa:	6191      	str	r1, [r2, #24]
 8000eac:	f640 0200 	movw	r2, #2048	; 0x800
 8000eb0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000eb4:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8000eb8:	6191      	str	r1, [r2, #24]
 8000eba:	f240 4200 	movw	r2, #1024	; 0x400
 8000ebe:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000ec2:	f04f 0101 	mov.w	r1, #1
 8000ec6:	6191      	str	r1, [r2, #24]
 8000ec8:	f640 4200 	movw	r2, #3072	; 0xc00
 8000ecc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000ed0:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8000ed4:	6191      	str	r1, [r2, #24]
 8000ed6:	f640 4200 	movw	r2, #3072	; 0xc00
 8000eda:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000ede:	f04f 0104 	mov.w	r1, #4
 8000ee2:	6191      	str	r1, [r2, #24]
	b continue
 8000ee4:	f000 b800 	b.w	8000ee8 <continue>

08000ee8 <continue>:
	

continue:
	pop {r1}
 8000ee8:	bc02      	pop	{r1}
	tbh [pc,r1]
 8000eea:	e8df f011 	tbh	[pc, r1, lsl #1]

08000eee <TBB_ANODE_table>:
 8000eee:	0005      	.short	0x0005
 8000ef0:	0095004d 	.word	0x0095004d
 8000ef4:	012500dd 	.word	0x012500dd

08000ef8 <anode_COLON>:
	.hword ((anode_DIGIT3 - TBB_ANODE_table)/2)
	.hword ((anode_DIGIT4 - TBB_ANODE_table)/2)

	.thumb_func
anode_COLON:
	ANODE_write 1,1,1,1,1,1,1,0
 8000ef8:	f240 4200 	movw	r2, #1024	; 0x400
 8000efc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000f00:	f04f 0120 	mov.w	r1, #32
 8000f04:	6191      	str	r1, [r2, #24]
 8000f06:	f240 4200 	movw	r2, #1024	; 0x400
 8000f0a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000f0e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f12:	6191      	str	r1, [r2, #24]
 8000f14:	f240 4200 	movw	r2, #1024	; 0x400
 8000f18:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000f1c:	f04f 0101 	mov.w	r1, #1
 8000f20:	6191      	str	r1, [r2, #24]
 8000f22:	f240 4200 	movw	r2, #1024	; 0x400
 8000f26:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000f2a:	f04f 0102 	mov.w	r1, #2
 8000f2e:	6191      	str	r1, [r2, #24]
 8000f30:	f640 0200 	movw	r2, #2048	; 0x800
 8000f34:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000f38:	f04f 0110 	mov.w	r1, #16
 8000f3c:	6191      	str	r1, [r2, #24]
 8000f3e:	f240 0200 	movw	r2, #0
 8000f42:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000f46:	f04f 0102 	mov.w	r1, #2
 8000f4a:	6191      	str	r1, [r2, #24]
 8000f4c:	f640 0200 	movw	r2, #2048	; 0x800
 8000f50:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000f54:	f04f 0104 	mov.w	r1, #4
 8000f58:	6191      	str	r1, [r2, #24]
 8000f5a:	f640 0200 	movw	r2, #2048	; 0x800
 8000f5e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000f62:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8000f66:	6191      	str	r1, [r2, #24]
 8000f68:	f640 0200 	movw	r2, #2048	; 0x800
 8000f6c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000f70:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000f74:	6191      	str	r1, [r2, #24]
 8000f76:	f640 0200 	movw	r2, #2048	; 0x800
 8000f7a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000f7e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f82:	6191      	str	r1, [r2, #24]
	b prt_end
 8000f84:	f000 b920 	b.w	80011c8 <prt_end>

08000f88 <anode_DIGIT1>:
	
	.thumb_func
anode_DIGIT1:
	ANODE_write 1,1,1,1,1,1,0,1
 8000f88:	f240 4200 	movw	r2, #1024	; 0x400
 8000f8c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000f90:	f04f 0120 	mov.w	r1, #32
 8000f94:	6191      	str	r1, [r2, #24]
 8000f96:	f240 4200 	movw	r2, #1024	; 0x400
 8000f9a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000f9e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fa2:	6191      	str	r1, [r2, #24]
 8000fa4:	f240 4200 	movw	r2, #1024	; 0x400
 8000fa8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000fac:	f04f 0101 	mov.w	r1, #1
 8000fb0:	6191      	str	r1, [r2, #24]
 8000fb2:	f240 4200 	movw	r2, #1024	; 0x400
 8000fb6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000fba:	f04f 0102 	mov.w	r1, #2
 8000fbe:	6191      	str	r1, [r2, #24]
 8000fc0:	f640 0200 	movw	r2, #2048	; 0x800
 8000fc4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000fc8:	f04f 0110 	mov.w	r1, #16
 8000fcc:	6191      	str	r1, [r2, #24]
 8000fce:	f240 0200 	movw	r2, #0
 8000fd2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000fd6:	f04f 0102 	mov.w	r1, #2
 8000fda:	6191      	str	r1, [r2, #24]
 8000fdc:	f640 0200 	movw	r2, #2048	; 0x800
 8000fe0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000fe4:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8000fe8:	6191      	str	r1, [r2, #24]
 8000fea:	f640 0200 	movw	r2, #2048	; 0x800
 8000fee:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000ff2:	f04f 0120 	mov.w	r1, #32
 8000ff6:	6191      	str	r1, [r2, #24]
 8000ff8:	f640 0200 	movw	r2, #2048	; 0x800
 8000ffc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001000:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001004:	6191      	str	r1, [r2, #24]
 8001006:	f640 0200 	movw	r2, #2048	; 0x800
 800100a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800100e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001012:	6191      	str	r1, [r2, #24]
	b prt_end
 8001014:	f000 b8d8 	b.w	80011c8 <prt_end>

08001018 <anode_DIGIT2>:
	
	.thumb_func
anode_DIGIT2:
	ANODE_write 1,1,1,1,1,0,1,1
 8001018:	f240 4200 	movw	r2, #1024	; 0x400
 800101c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001020:	f04f 0120 	mov.w	r1, #32
 8001024:	6191      	str	r1, [r2, #24]
 8001026:	f240 4200 	movw	r2, #1024	; 0x400
 800102a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800102e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001032:	6191      	str	r1, [r2, #24]
 8001034:	f240 4200 	movw	r2, #1024	; 0x400
 8001038:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800103c:	f04f 0101 	mov.w	r1, #1
 8001040:	6191      	str	r1, [r2, #24]
 8001042:	f240 4200 	movw	r2, #1024	; 0x400
 8001046:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800104a:	f04f 0102 	mov.w	r1, #2
 800104e:	6191      	str	r1, [r2, #24]
 8001050:	f640 0200 	movw	r2, #2048	; 0x800
 8001054:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001058:	f04f 0110 	mov.w	r1, #16
 800105c:	6191      	str	r1, [r2, #24]
 800105e:	f240 0200 	movw	r2, #0
 8001062:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001066:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800106a:	6191      	str	r1, [r2, #24]
 800106c:	f640 0200 	movw	r2, #2048	; 0x800
 8001070:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001074:	f04f 0104 	mov.w	r1, #4
 8001078:	6191      	str	r1, [r2, #24]
 800107a:	f640 0200 	movw	r2, #2048	; 0x800
 800107e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001082:	f04f 0120 	mov.w	r1, #32
 8001086:	6191      	str	r1, [r2, #24]
 8001088:	f640 0200 	movw	r2, #2048	; 0x800
 800108c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001090:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001094:	6191      	str	r1, [r2, #24]
 8001096:	f640 0200 	movw	r2, #2048	; 0x800
 800109a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800109e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010a2:	6191      	str	r1, [r2, #24]
	b prt_end
 80010a4:	f000 b890 	b.w	80011c8 <prt_end>

080010a8 <anode_DIGIT3>:
	
	.thumb_func
anode_DIGIT3:
	ANODE_write 1,1,1,1,0,1,1,1
 80010a8:	f240 4200 	movw	r2, #1024	; 0x400
 80010ac:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80010b0:	f04f 0120 	mov.w	r1, #32
 80010b4:	6191      	str	r1, [r2, #24]
 80010b6:	f240 4200 	movw	r2, #1024	; 0x400
 80010ba:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80010be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010c2:	6191      	str	r1, [r2, #24]
 80010c4:	f240 4200 	movw	r2, #1024	; 0x400
 80010c8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80010cc:	f04f 0101 	mov.w	r1, #1
 80010d0:	6191      	str	r1, [r2, #24]
 80010d2:	f240 4200 	movw	r2, #1024	; 0x400
 80010d6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80010da:	f04f 0102 	mov.w	r1, #2
 80010de:	6191      	str	r1, [r2, #24]
 80010e0:	f640 0200 	movw	r2, #2048	; 0x800
 80010e4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80010e8:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 80010ec:	6191      	str	r1, [r2, #24]
 80010ee:	f240 0200 	movw	r2, #0
 80010f2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80010f6:	f04f 0102 	mov.w	r1, #2
 80010fa:	6191      	str	r1, [r2, #24]
 80010fc:	f640 0200 	movw	r2, #2048	; 0x800
 8001100:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001104:	f04f 0104 	mov.w	r1, #4
 8001108:	6191      	str	r1, [r2, #24]
 800110a:	f640 0200 	movw	r2, #2048	; 0x800
 800110e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001112:	f04f 0120 	mov.w	r1, #32
 8001116:	6191      	str	r1, [r2, #24]
 8001118:	f640 0200 	movw	r2, #2048	; 0x800
 800111c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001120:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001124:	6191      	str	r1, [r2, #24]
 8001126:	f640 0200 	movw	r2, #2048	; 0x800
 800112a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800112e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001132:	6191      	str	r1, [r2, #24]
	b prt_end
 8001134:	f000 b848 	b.w	80011c8 <prt_end>

08001138 <anode_DIGIT4>:
	
	.thumb_func
anode_DIGIT4:
	ANODE_write 1,1,1,0,1,1,1,1
 8001138:	f240 4200 	movw	r2, #1024	; 0x400
 800113c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001140:	f04f 0120 	mov.w	r1, #32
 8001144:	6191      	str	r1, [r2, #24]
 8001146:	f240 4200 	movw	r2, #1024	; 0x400
 800114a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800114e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001152:	6191      	str	r1, [r2, #24]
 8001154:	f240 4200 	movw	r2, #1024	; 0x400
 8001158:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800115c:	f04f 0101 	mov.w	r1, #1
 8001160:	6191      	str	r1, [r2, #24]
 8001162:	f240 4200 	movw	r2, #1024	; 0x400
 8001166:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800116a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800116e:	6191      	str	r1, [r2, #24]
 8001170:	f640 0200 	movw	r2, #2048	; 0x800
 8001174:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001178:	f04f 0110 	mov.w	r1, #16
 800117c:	6191      	str	r1, [r2, #24]
 800117e:	f240 0200 	movw	r2, #0
 8001182:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001186:	f04f 0102 	mov.w	r1, #2
 800118a:	6191      	str	r1, [r2, #24]
 800118c:	f640 0200 	movw	r2, #2048	; 0x800
 8001190:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001194:	f04f 0104 	mov.w	r1, #4
 8001198:	6191      	str	r1, [r2, #24]
 800119a:	f640 0200 	movw	r2, #2048	; 0x800
 800119e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80011a2:	f04f 0120 	mov.w	r1, #32
 80011a6:	6191      	str	r1, [r2, #24]
 80011a8:	f640 0200 	movw	r2, #2048	; 0x800
 80011ac:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80011b0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80011b4:	6191      	str	r1, [r2, #24]
 80011b6:	f640 0200 	movw	r2, #2048	; 0x800
 80011ba:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80011be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011c2:	6191      	str	r1, [r2, #24]
	b prt_end
 80011c4:	f000 b800 	b.w	80011c8 <prt_end>

080011c8 <prt_end>:

prt_end: 
	PORTBIT_write GPIOC_BASE,1,0			@;	01_PC1	CA_EN	-- enable cathode (active-low)
 80011c8:	f640 0200 	movw	r2, #2048	; 0x800
 80011cc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80011d0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80011d4:	6191      	str	r1, [r2, #24]
	PORTBIT_write GPIOB_BASE,4,0			@;	01_PB4	AN_EN	-- enable anode   (active-low)
 80011d6:	f240 4200 	movw	r2, #1024	; 0x400
 80011da:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80011de:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 80011e2:	6191      	str	r1, [r2, #24]
	@;b get_switch_pcont
	bx lr
 80011e4:	4770      	bx	lr

080011e6 <asm_set_switch>:
	@;.thumb_func
asm_set_switch:

	@;push {r0}

	PORTBIT_write GPIOC_BASE,1,1			@;	01_PC1	CA_EN	-- disable cathode (active-low)
 80011e6:	f640 0200 	movw	r2, #2048	; 0x800
 80011ea:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80011ee:	f04f 0102 	mov.w	r1, #2
 80011f2:	6191      	str	r1, [r2, #24]
	PORTBIT_write GPIOB_BASE,4,1			@;	01_PB4	AN_EN	-- disable anode   (active-low)
 80011f4:	f240 4200 	movw	r2, #1024	; 0x400
 80011f8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80011fc:	f04f 0110 	mov.w	r1, #16
 8001200:	6191      	str	r1, [r2, #24]

	@;pop {r0}
	tbh [pc,r0]
 8001202:	e8df f010 	tbh	[pc, r0, lsl #1]

08001206 <TBB_SWITCH_table>:
 8001206:	000d      	.short	0x000d
 8001208:	00d90073 	.word	0x00d90073
 800120c:	01a5013f 	.word	0x01a5013f
 8001210:	0271020b 	.word	0x0271020b
 8001214:	033d02d7 	.word	0x033d02d7
 8001218:	040903a3 	.word	0x040903a3
 800121c:	04d5046f 	.word	0x04d5046f

08001220 <switch_1>:
	.hword ((switch_C - TBB_SWITCH_table)/2)
	.hword ((switch_D - TBB_SWITCH_table)/2)
	
	.thumb_func
switch_1:
	CATHODE_write 1,1,1,0,1,1,1,1
 8001220:	f640 0200 	movw	r2, #2048	; 0x800
 8001224:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001228:	f04f 0120 	mov.w	r1, #32
 800122c:	6191      	str	r1, [r2, #24]
 800122e:	f240 4200 	movw	r2, #1024	; 0x400
 8001232:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001236:	f04f 0102 	mov.w	r1, #2
 800123a:	6191      	str	r1, [r2, #24]
 800123c:	f240 0200 	movw	r2, #0
 8001240:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001244:	f04f 0102 	mov.w	r1, #2
 8001248:	6191      	str	r1, [r2, #24]
 800124a:	f240 4200 	movw	r2, #1024	; 0x400
 800124e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001252:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001256:	6191      	str	r1, [r2, #24]
 8001258:	f240 4200 	movw	r2, #1024	; 0x400
 800125c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001260:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001264:	6191      	str	r1, [r2, #24]
 8001266:	f640 0200 	movw	r2, #2048	; 0x800
 800126a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800126e:	f04f 0104 	mov.w	r1, #4
 8001272:	6191      	str	r1, [r2, #24]
 8001274:	f640 0200 	movw	r2, #2048	; 0x800
 8001278:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800127c:	f04f 0110 	mov.w	r1, #16
 8001280:	6191      	str	r1, [r2, #24]
 8001282:	f240 4200 	movw	r2, #1024	; 0x400
 8001286:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800128a:	f04f 0101 	mov.w	r1, #1
 800128e:	6191      	str	r1, [r2, #24]
 8001290:	f640 4200 	movw	r2, #3072	; 0xc00
 8001294:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001298:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800129c:	6191      	str	r1, [r2, #24]
 800129e:	f640 4200 	movw	r2, #3072	; 0xc00
 80012a2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80012a6:	f04f 0104 	mov.w	r1, #4
 80012aa:	6191      	str	r1, [r2, #24]
	PORTBIT_write GPIOC_BASE,1,0			@;	01_PC1	CA_EN	-- enable cathode (active-low)
 80012ac:	f640 0200 	movw	r2, #2048	; 0x800
 80012b0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80012b4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80012b8:	6191      	str	r1, [r2, #24]
	SWITCH_read GPIOB_BASE,5,GPIOA_BASE,15
 80012ba:	f240 4200 	movw	r2, #1024	; 0x400
 80012be:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80012c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80012c6:	6191      	str	r1, [r2, #24]
 80012c8:	f240 0200 	movw	r2, #0
 80012cc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80012d0:	6910      	ldr	r0, [r2, #16]
 80012d2:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
 80012d6:	ea4f 30d0 	mov.w	r0, r0, lsr #15
 80012da:	f240 4200 	movw	r2, #1024	; 0x400
 80012de:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80012e2:	f04f 0120 	mov.w	r1, #32
 80012e6:	6191      	str	r1, [r2, #24]
	b sw_end
 80012e8:	f000 bcc8 	b.w	8001c7c <sw_end>

080012ec <switch_2>:
	
	.thumb_func
switch_2:
	CATHODE_write 1,1,1,0,1,1,1,1
 80012ec:	f640 0200 	movw	r2, #2048	; 0x800
 80012f0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80012f4:	f04f 0120 	mov.w	r1, #32
 80012f8:	6191      	str	r1, [r2, #24]
 80012fa:	f240 4200 	movw	r2, #1024	; 0x400
 80012fe:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001302:	f04f 0102 	mov.w	r1, #2
 8001306:	6191      	str	r1, [r2, #24]
 8001308:	f240 0200 	movw	r2, #0
 800130c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001310:	f04f 0102 	mov.w	r1, #2
 8001314:	6191      	str	r1, [r2, #24]
 8001316:	f240 4200 	movw	r2, #1024	; 0x400
 800131a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800131e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001322:	6191      	str	r1, [r2, #24]
 8001324:	f240 4200 	movw	r2, #1024	; 0x400
 8001328:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800132c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001330:	6191      	str	r1, [r2, #24]
 8001332:	f640 0200 	movw	r2, #2048	; 0x800
 8001336:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800133a:	f04f 0104 	mov.w	r1, #4
 800133e:	6191      	str	r1, [r2, #24]
 8001340:	f640 0200 	movw	r2, #2048	; 0x800
 8001344:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001348:	f04f 0110 	mov.w	r1, #16
 800134c:	6191      	str	r1, [r2, #24]
 800134e:	f240 4200 	movw	r2, #1024	; 0x400
 8001352:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001356:	f04f 0101 	mov.w	r1, #1
 800135a:	6191      	str	r1, [r2, #24]
 800135c:	f640 4200 	movw	r2, #3072	; 0xc00
 8001360:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001364:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8001368:	6191      	str	r1, [r2, #24]
 800136a:	f640 4200 	movw	r2, #3072	; 0xc00
 800136e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001372:	f04f 0104 	mov.w	r1, #4
 8001376:	6191      	str	r1, [r2, #24]
	PORTBIT_write GPIOC_BASE,1,0			@;	01_PC1	CA_EN	-- enable cathode (active-low)
 8001378:	f640 0200 	movw	r2, #2048	; 0x800
 800137c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001380:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8001384:	6191      	str	r1, [r2, #24]
	SWITCH_read GPIOB_BASE,5,GPIOC_BASE,8
 8001386:	f240 4200 	movw	r2, #1024	; 0x400
 800138a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800138e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001392:	6191      	str	r1, [r2, #24]
 8001394:	f640 0200 	movw	r2, #2048	; 0x800
 8001398:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800139c:	6910      	ldr	r0, [r2, #16]
 800139e:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 80013a2:	ea4f 2010 	mov.w	r0, r0, lsr #8
 80013a6:	f240 4200 	movw	r2, #1024	; 0x400
 80013aa:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80013ae:	f04f 0120 	mov.w	r1, #32
 80013b2:	6191      	str	r1, [r2, #24]
	b sw_end
 80013b4:	f000 bc62 	b.w	8001c7c <sw_end>

080013b8 <switch_3>:
	
	.thumb_func
switch_3:
	CATHODE_write 1,1,1,1,0,1,1,1
 80013b8:	f640 0200 	movw	r2, #2048	; 0x800
 80013bc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80013c0:	f04f 0120 	mov.w	r1, #32
 80013c4:	6191      	str	r1, [r2, #24]
 80013c6:	f240 4200 	movw	r2, #1024	; 0x400
 80013ca:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80013ce:	f04f 0102 	mov.w	r1, #2
 80013d2:	6191      	str	r1, [r2, #24]
 80013d4:	f240 0200 	movw	r2, #0
 80013d8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80013dc:	f04f 0102 	mov.w	r1, #2
 80013e0:	6191      	str	r1, [r2, #24]
 80013e2:	f240 4200 	movw	r2, #1024	; 0x400
 80013e6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80013ea:	f04f 0120 	mov.w	r1, #32
 80013ee:	6191      	str	r1, [r2, #24]
 80013f0:	f240 4200 	movw	r2, #1024	; 0x400
 80013f4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80013f8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80013fc:	6191      	str	r1, [r2, #24]
 80013fe:	f640 0200 	movw	r2, #2048	; 0x800
 8001402:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001406:	f04f 0104 	mov.w	r1, #4
 800140a:	6191      	str	r1, [r2, #24]
 800140c:	f640 0200 	movw	r2, #2048	; 0x800
 8001410:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001414:	f04f 0110 	mov.w	r1, #16
 8001418:	6191      	str	r1, [r2, #24]
 800141a:	f240 4200 	movw	r2, #1024	; 0x400
 800141e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001422:	f04f 0101 	mov.w	r1, #1
 8001426:	6191      	str	r1, [r2, #24]
 8001428:	f640 4200 	movw	r2, #3072	; 0xc00
 800142c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001430:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8001434:	6191      	str	r1, [r2, #24]
 8001436:	f640 4200 	movw	r2, #3072	; 0xc00
 800143a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800143e:	f04f 0104 	mov.w	r1, #4
 8001442:	6191      	str	r1, [r2, #24]
	PORTBIT_write GPIOC_BASE,1,0			@;	01_PC1	CA_EN	-- enable cathode (active-low)
 8001444:	f640 0200 	movw	r2, #2048	; 0x800
 8001448:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800144c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8001450:	6191      	str	r1, [r2, #24]
	SWITCH_read GPIOB_BASE,11,GPIOA_BASE,15
 8001452:	f240 4200 	movw	r2, #1024	; 0x400
 8001456:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800145a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800145e:	6191      	str	r1, [r2, #24]
 8001460:	f240 0200 	movw	r2, #0
 8001464:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001468:	6910      	ldr	r0, [r2, #16]
 800146a:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
 800146e:	ea4f 30d0 	mov.w	r0, r0, lsr #15
 8001472:	f240 4200 	movw	r2, #1024	; 0x400
 8001476:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800147a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800147e:	6191      	str	r1, [r2, #24]
	b sw_end
 8001480:	f000 bbfc 	b.w	8001c7c <sw_end>

08001484 <switch_4>:
	
	.thumb_func
switch_4:
	CATHODE_write 1,1,1,1,0,1,1,1
 8001484:	f640 0200 	movw	r2, #2048	; 0x800
 8001488:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800148c:	f04f 0120 	mov.w	r1, #32
 8001490:	6191      	str	r1, [r2, #24]
 8001492:	f240 4200 	movw	r2, #1024	; 0x400
 8001496:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800149a:	f04f 0102 	mov.w	r1, #2
 800149e:	6191      	str	r1, [r2, #24]
 80014a0:	f240 0200 	movw	r2, #0
 80014a4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80014a8:	f04f 0102 	mov.w	r1, #2
 80014ac:	6191      	str	r1, [r2, #24]
 80014ae:	f240 4200 	movw	r2, #1024	; 0x400
 80014b2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80014b6:	f04f 0120 	mov.w	r1, #32
 80014ba:	6191      	str	r1, [r2, #24]
 80014bc:	f240 4200 	movw	r2, #1024	; 0x400
 80014c0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80014c4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80014c8:	6191      	str	r1, [r2, #24]
 80014ca:	f640 0200 	movw	r2, #2048	; 0x800
 80014ce:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80014d2:	f04f 0104 	mov.w	r1, #4
 80014d6:	6191      	str	r1, [r2, #24]
 80014d8:	f640 0200 	movw	r2, #2048	; 0x800
 80014dc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80014e0:	f04f 0110 	mov.w	r1, #16
 80014e4:	6191      	str	r1, [r2, #24]
 80014e6:	f240 4200 	movw	r2, #1024	; 0x400
 80014ea:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80014ee:	f04f 0101 	mov.w	r1, #1
 80014f2:	6191      	str	r1, [r2, #24]
 80014f4:	f640 4200 	movw	r2, #3072	; 0xc00
 80014f8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80014fc:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8001500:	6191      	str	r1, [r2, #24]
 8001502:	f640 4200 	movw	r2, #3072	; 0xc00
 8001506:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800150a:	f04f 0104 	mov.w	r1, #4
 800150e:	6191      	str	r1, [r2, #24]
	PORTBIT_write GPIOC_BASE,1,0			@;	01_PC1	CA_EN	-- enable cathode (active-low)
 8001510:	f640 0200 	movw	r2, #2048	; 0x800
 8001514:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001518:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800151c:	6191      	str	r1, [r2, #24]
	SWITCH_read GPIOB_BASE,11,GPIOC_BASE,8
 800151e:	f240 4200 	movw	r2, #1024	; 0x400
 8001522:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001526:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800152a:	6191      	str	r1, [r2, #24]
 800152c:	f640 0200 	movw	r2, #2048	; 0x800
 8001530:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001534:	6910      	ldr	r0, [r2, #16]
 8001536:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 800153a:	ea4f 2010 	mov.w	r0, r0, lsr #8
 800153e:	f240 4200 	movw	r2, #1024	; 0x400
 8001542:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001546:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800154a:	6191      	str	r1, [r2, #24]
	b sw_end
 800154c:	f000 bb96 	b.w	8001c7c <sw_end>

08001550 <switch_5>:
	
	.thumb_func
switch_5:
	CATHODE_write 1,1,1,1,1,1,1,0
 8001550:	f640 0200 	movw	r2, #2048	; 0x800
 8001554:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001558:	f04f 0120 	mov.w	r1, #32
 800155c:	6191      	str	r1, [r2, #24]
 800155e:	f240 4200 	movw	r2, #1024	; 0x400
 8001562:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001566:	f04f 0102 	mov.w	r1, #2
 800156a:	6191      	str	r1, [r2, #24]
 800156c:	f240 0200 	movw	r2, #0
 8001570:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001574:	f04f 0102 	mov.w	r1, #2
 8001578:	6191      	str	r1, [r2, #24]
 800157a:	f240 4200 	movw	r2, #1024	; 0x400
 800157e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001582:	f04f 0120 	mov.w	r1, #32
 8001586:	6191      	str	r1, [r2, #24]
 8001588:	f240 4200 	movw	r2, #1024	; 0x400
 800158c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001590:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001594:	6191      	str	r1, [r2, #24]
 8001596:	f640 0200 	movw	r2, #2048	; 0x800
 800159a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800159e:	f04f 0104 	mov.w	r1, #4
 80015a2:	6191      	str	r1, [r2, #24]
 80015a4:	f640 0200 	movw	r2, #2048	; 0x800
 80015a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80015ac:	f04f 0110 	mov.w	r1, #16
 80015b0:	6191      	str	r1, [r2, #24]
 80015b2:	f240 4200 	movw	r2, #1024	; 0x400
 80015b6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80015ba:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80015be:	6191      	str	r1, [r2, #24]
 80015c0:	f640 4200 	movw	r2, #3072	; 0xc00
 80015c4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80015c8:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 80015cc:	6191      	str	r1, [r2, #24]
 80015ce:	f640 4200 	movw	r2, #3072	; 0xc00
 80015d2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80015d6:	f04f 0104 	mov.w	r1, #4
 80015da:	6191      	str	r1, [r2, #24]
	PORTBIT_write GPIOC_BASE,1,0			@;	01_PC1	CA_EN	-- enable cathode (active-low)
 80015dc:	f640 0200 	movw	r2, #2048	; 0x800
 80015e0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80015e4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80015e8:	6191      	str	r1, [r2, #24]
	SWITCH_read GPIOB_BASE,0,GPIOA_BASE,15
 80015ea:	f240 4200 	movw	r2, #1024	; 0x400
 80015ee:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80015f2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80015f6:	6191      	str	r1, [r2, #24]
 80015f8:	f240 0200 	movw	r2, #0
 80015fc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001600:	6910      	ldr	r0, [r2, #16]
 8001602:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
 8001606:	ea4f 30d0 	mov.w	r0, r0, lsr #15
 800160a:	f240 4200 	movw	r2, #1024	; 0x400
 800160e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001612:	f04f 0101 	mov.w	r1, #1
 8001616:	6191      	str	r1, [r2, #24]
	b sw_end
 8001618:	f000 bb30 	b.w	8001c7c <sw_end>

0800161c <switch_6>:
	
	.thumb_func
switch_6:
	CATHODE_write 1,1,1,1,1,1,1,0
 800161c:	f640 0200 	movw	r2, #2048	; 0x800
 8001620:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001624:	f04f 0120 	mov.w	r1, #32
 8001628:	6191      	str	r1, [r2, #24]
 800162a:	f240 4200 	movw	r2, #1024	; 0x400
 800162e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001632:	f04f 0102 	mov.w	r1, #2
 8001636:	6191      	str	r1, [r2, #24]
 8001638:	f240 0200 	movw	r2, #0
 800163c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001640:	f04f 0102 	mov.w	r1, #2
 8001644:	6191      	str	r1, [r2, #24]
 8001646:	f240 4200 	movw	r2, #1024	; 0x400
 800164a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800164e:	f04f 0120 	mov.w	r1, #32
 8001652:	6191      	str	r1, [r2, #24]
 8001654:	f240 4200 	movw	r2, #1024	; 0x400
 8001658:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800165c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001660:	6191      	str	r1, [r2, #24]
 8001662:	f640 0200 	movw	r2, #2048	; 0x800
 8001666:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800166a:	f04f 0104 	mov.w	r1, #4
 800166e:	6191      	str	r1, [r2, #24]
 8001670:	f640 0200 	movw	r2, #2048	; 0x800
 8001674:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001678:	f04f 0110 	mov.w	r1, #16
 800167c:	6191      	str	r1, [r2, #24]
 800167e:	f240 4200 	movw	r2, #1024	; 0x400
 8001682:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001686:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800168a:	6191      	str	r1, [r2, #24]
 800168c:	f640 4200 	movw	r2, #3072	; 0xc00
 8001690:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001694:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8001698:	6191      	str	r1, [r2, #24]
 800169a:	f640 4200 	movw	r2, #3072	; 0xc00
 800169e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80016a2:	f04f 0104 	mov.w	r1, #4
 80016a6:	6191      	str	r1, [r2, #24]
	PORTBIT_write GPIOC_BASE,1,0			@;	01_PC1	CA_EN	-- enable cathode (active-low)
 80016a8:	f640 0200 	movw	r2, #2048	; 0x800
 80016ac:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80016b0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80016b4:	6191      	str	r1, [r2, #24]
	SWITCH_read GPIOB_BASE,0,GPIOC_BASE,8
 80016b6:	f240 4200 	movw	r2, #1024	; 0x400
 80016ba:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80016be:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80016c2:	6191      	str	r1, [r2, #24]
 80016c4:	f640 0200 	movw	r2, #2048	; 0x800
 80016c8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80016cc:	6910      	ldr	r0, [r2, #16]
 80016ce:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 80016d2:	ea4f 2010 	mov.w	r0, r0, lsr #8
 80016d6:	f240 4200 	movw	r2, #1024	; 0x400
 80016da:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80016de:	f04f 0101 	mov.w	r1, #1
 80016e2:	6191      	str	r1, [r2, #24]
	b sw_end
 80016e4:	f000 baca 	b.w	8001c7c <sw_end>

080016e8 <switch_7>:
	
	.thumb_func
switch_7:
	CATHODE_write 1,0,1,1,1,1,1,1
 80016e8:	f640 0200 	movw	r2, #2048	; 0x800
 80016ec:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80016f0:	f04f 0120 	mov.w	r1, #32
 80016f4:	6191      	str	r1, [r2, #24]
 80016f6:	f240 4200 	movw	r2, #1024	; 0x400
 80016fa:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80016fe:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8001702:	6191      	str	r1, [r2, #24]
 8001704:	f240 0200 	movw	r2, #0
 8001708:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800170c:	f04f 0102 	mov.w	r1, #2
 8001710:	6191      	str	r1, [r2, #24]
 8001712:	f240 4200 	movw	r2, #1024	; 0x400
 8001716:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800171a:	f04f 0120 	mov.w	r1, #32
 800171e:	6191      	str	r1, [r2, #24]
 8001720:	f240 4200 	movw	r2, #1024	; 0x400
 8001724:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001728:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800172c:	6191      	str	r1, [r2, #24]
 800172e:	f640 0200 	movw	r2, #2048	; 0x800
 8001732:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001736:	f04f 0104 	mov.w	r1, #4
 800173a:	6191      	str	r1, [r2, #24]
 800173c:	f640 0200 	movw	r2, #2048	; 0x800
 8001740:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001744:	f04f 0110 	mov.w	r1, #16
 8001748:	6191      	str	r1, [r2, #24]
 800174a:	f240 4200 	movw	r2, #1024	; 0x400
 800174e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001752:	f04f 0101 	mov.w	r1, #1
 8001756:	6191      	str	r1, [r2, #24]
 8001758:	f640 4200 	movw	r2, #3072	; 0xc00
 800175c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001760:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8001764:	6191      	str	r1, [r2, #24]
 8001766:	f640 4200 	movw	r2, #3072	; 0xc00
 800176a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800176e:	f04f 0104 	mov.w	r1, #4
 8001772:	6191      	str	r1, [r2, #24]
	PORTBIT_write GPIOC_BASE,1,0			@;	01_PC1	CA_EN	-- enable cathode (active-low)
 8001774:	f640 0200 	movw	r2, #2048	; 0x800
 8001778:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800177c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8001780:	6191      	str	r1, [r2, #24]
	SWITCH_read GPIOB_BASE,1,GPIOA_BASE,15
 8001782:	f240 4200 	movw	r2, #1024	; 0x400
 8001786:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800178a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800178e:	6191      	str	r1, [r2, #24]
 8001790:	f240 0200 	movw	r2, #0
 8001794:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001798:	6910      	ldr	r0, [r2, #16]
 800179a:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
 800179e:	ea4f 30d0 	mov.w	r0, r0, lsr #15
 80017a2:	f240 4200 	movw	r2, #1024	; 0x400
 80017a6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80017aa:	f04f 0102 	mov.w	r1, #2
 80017ae:	6191      	str	r1, [r2, #24]
	b sw_end
 80017b0:	f000 ba64 	b.w	8001c7c <sw_end>

080017b4 <switch_8>:
	
	.thumb_func
switch_8:
	CATHODE_write 1,0,1,1,1,1,1,1
 80017b4:	f640 0200 	movw	r2, #2048	; 0x800
 80017b8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80017bc:	f04f 0120 	mov.w	r1, #32
 80017c0:	6191      	str	r1, [r2, #24]
 80017c2:	f240 4200 	movw	r2, #1024	; 0x400
 80017c6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80017ca:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80017ce:	6191      	str	r1, [r2, #24]
 80017d0:	f240 0200 	movw	r2, #0
 80017d4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80017d8:	f04f 0102 	mov.w	r1, #2
 80017dc:	6191      	str	r1, [r2, #24]
 80017de:	f240 4200 	movw	r2, #1024	; 0x400
 80017e2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80017e6:	f04f 0120 	mov.w	r1, #32
 80017ea:	6191      	str	r1, [r2, #24]
 80017ec:	f240 4200 	movw	r2, #1024	; 0x400
 80017f0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80017f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017f8:	6191      	str	r1, [r2, #24]
 80017fa:	f640 0200 	movw	r2, #2048	; 0x800
 80017fe:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001802:	f04f 0104 	mov.w	r1, #4
 8001806:	6191      	str	r1, [r2, #24]
 8001808:	f640 0200 	movw	r2, #2048	; 0x800
 800180c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001810:	f04f 0110 	mov.w	r1, #16
 8001814:	6191      	str	r1, [r2, #24]
 8001816:	f240 4200 	movw	r2, #1024	; 0x400
 800181a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800181e:	f04f 0101 	mov.w	r1, #1
 8001822:	6191      	str	r1, [r2, #24]
 8001824:	f640 4200 	movw	r2, #3072	; 0xc00
 8001828:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800182c:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8001830:	6191      	str	r1, [r2, #24]
 8001832:	f640 4200 	movw	r2, #3072	; 0xc00
 8001836:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800183a:	f04f 0104 	mov.w	r1, #4
 800183e:	6191      	str	r1, [r2, #24]
	PORTBIT_write GPIOC_BASE,1,0			@;	01_PC1	CA_EN	-- enable cathode (active-low)
 8001840:	f640 0200 	movw	r2, #2048	; 0x800
 8001844:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001848:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800184c:	6191      	str	r1, [r2, #24]
	SWITCH_read GPIOB_BASE,1,GPIOC_BASE,8
 800184e:	f240 4200 	movw	r2, #1024	; 0x400
 8001852:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001856:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800185a:	6191      	str	r1, [r2, #24]
 800185c:	f640 0200 	movw	r2, #2048	; 0x800
 8001860:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001864:	6910      	ldr	r0, [r2, #16]
 8001866:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 800186a:	ea4f 2010 	mov.w	r0, r0, lsr #8
 800186e:	f240 4200 	movw	r2, #1024	; 0x400
 8001872:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001876:	f04f 0102 	mov.w	r1, #2
 800187a:	6191      	str	r1, [r2, #24]
	b sw_end
 800187c:	f000 b9fe 	b.w	8001c7c <sw_end>

08001880 <switch_9>:
	
	.thumb_func
switch_9:
	CATHODE_write 1,1,1,1,1,1,0,1
 8001880:	f640 0200 	movw	r2, #2048	; 0x800
 8001884:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001888:	f04f 0120 	mov.w	r1, #32
 800188c:	6191      	str	r1, [r2, #24]
 800188e:	f240 4200 	movw	r2, #1024	; 0x400
 8001892:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001896:	f04f 0102 	mov.w	r1, #2
 800189a:	6191      	str	r1, [r2, #24]
 800189c:	f240 0200 	movw	r2, #0
 80018a0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80018a4:	f04f 0102 	mov.w	r1, #2
 80018a8:	6191      	str	r1, [r2, #24]
 80018aa:	f240 4200 	movw	r2, #1024	; 0x400
 80018ae:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80018b2:	f04f 0120 	mov.w	r1, #32
 80018b6:	6191      	str	r1, [r2, #24]
 80018b8:	f240 4200 	movw	r2, #1024	; 0x400
 80018bc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80018c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018c4:	6191      	str	r1, [r2, #24]
 80018c6:	f640 0200 	movw	r2, #2048	; 0x800
 80018ca:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80018ce:	f04f 0104 	mov.w	r1, #4
 80018d2:	6191      	str	r1, [r2, #24]
 80018d4:	f640 0200 	movw	r2, #2048	; 0x800
 80018d8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80018dc:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 80018e0:	6191      	str	r1, [r2, #24]
 80018e2:	f240 4200 	movw	r2, #1024	; 0x400
 80018e6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80018ea:	f04f 0101 	mov.w	r1, #1
 80018ee:	6191      	str	r1, [r2, #24]
 80018f0:	f640 4200 	movw	r2, #3072	; 0xc00
 80018f4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80018f8:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 80018fc:	6191      	str	r1, [r2, #24]
 80018fe:	f640 4200 	movw	r2, #3072	; 0xc00
 8001902:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001906:	f04f 0104 	mov.w	r1, #4
 800190a:	6191      	str	r1, [r2, #24]
	PORTBIT_write GPIOC_BASE,1,0			@;	01_PC1	CA_EN	-- enable cathode (active-low)
 800190c:	f640 0200 	movw	r2, #2048	; 0x800
 8001910:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001914:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8001918:	6191      	str	r1, [r2, #24]
	SWITCH_read GPIOC_BASE,4,GPIOA_BASE,15
 800191a:	f640 0200 	movw	r2, #2048	; 0x800
 800191e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001922:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8001926:	6191      	str	r1, [r2, #24]
 8001928:	f240 0200 	movw	r2, #0
 800192c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001930:	6910      	ldr	r0, [r2, #16]
 8001932:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
 8001936:	ea4f 30d0 	mov.w	r0, r0, lsr #15
 800193a:	f640 0200 	movw	r2, #2048	; 0x800
 800193e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001942:	f04f 0110 	mov.w	r1, #16
 8001946:	6191      	str	r1, [r2, #24]
	b sw_end
 8001948:	f000 b998 	b.w	8001c7c <sw_end>

0800194c <switch_A>:
	
	.thumb_func
switch_A:
	CATHODE_write 1,1,1,1,1,1,0,1
 800194c:	f640 0200 	movw	r2, #2048	; 0x800
 8001950:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001954:	f04f 0120 	mov.w	r1, #32
 8001958:	6191      	str	r1, [r2, #24]
 800195a:	f240 4200 	movw	r2, #1024	; 0x400
 800195e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001962:	f04f 0102 	mov.w	r1, #2
 8001966:	6191      	str	r1, [r2, #24]
 8001968:	f240 0200 	movw	r2, #0
 800196c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001970:	f04f 0102 	mov.w	r1, #2
 8001974:	6191      	str	r1, [r2, #24]
 8001976:	f240 4200 	movw	r2, #1024	; 0x400
 800197a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800197e:	f04f 0120 	mov.w	r1, #32
 8001982:	6191      	str	r1, [r2, #24]
 8001984:	f240 4200 	movw	r2, #1024	; 0x400
 8001988:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800198c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001990:	6191      	str	r1, [r2, #24]
 8001992:	f640 0200 	movw	r2, #2048	; 0x800
 8001996:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800199a:	f04f 0104 	mov.w	r1, #4
 800199e:	6191      	str	r1, [r2, #24]
 80019a0:	f640 0200 	movw	r2, #2048	; 0x800
 80019a4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80019a8:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 80019ac:	6191      	str	r1, [r2, #24]
 80019ae:	f240 4200 	movw	r2, #1024	; 0x400
 80019b2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80019b6:	f04f 0101 	mov.w	r1, #1
 80019ba:	6191      	str	r1, [r2, #24]
 80019bc:	f640 4200 	movw	r2, #3072	; 0xc00
 80019c0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80019c4:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 80019c8:	6191      	str	r1, [r2, #24]
 80019ca:	f640 4200 	movw	r2, #3072	; 0xc00
 80019ce:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80019d2:	f04f 0104 	mov.w	r1, #4
 80019d6:	6191      	str	r1, [r2, #24]
	PORTBIT_write GPIOC_BASE,1,0			@;	01_PC1	CA_EN	-- enable cathode (active-low)
 80019d8:	f640 0200 	movw	r2, #2048	; 0x800
 80019dc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80019e0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80019e4:	6191      	str	r1, [r2, #24]
	SWITCH_read GPIOC_BASE,4,GPIOC_BASE,8
 80019e6:	f640 0200 	movw	r2, #2048	; 0x800
 80019ea:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80019ee:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 80019f2:	6191      	str	r1, [r2, #24]
 80019f4:	f640 0200 	movw	r2, #2048	; 0x800
 80019f8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80019fc:	6910      	ldr	r0, [r2, #16]
 80019fe:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8001a02:	ea4f 2010 	mov.w	r0, r0, lsr #8
 8001a06:	f640 0200 	movw	r2, #2048	; 0x800
 8001a0a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001a0e:	f04f 0110 	mov.w	r1, #16
 8001a12:	6191      	str	r1, [r2, #24]
	b sw_end
 8001a14:	f000 b932 	b.w	8001c7c <sw_end>

08001a18 <switch_B>:
	
	.thumb_func
switch_B:
	CATHODE_write 0,1,1,1,1,1,1,1
 8001a18:	f640 0200 	movw	r2, #2048	; 0x800
 8001a1c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001a20:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001a24:	6191      	str	r1, [r2, #24]
 8001a26:	f240 4200 	movw	r2, #1024	; 0x400
 8001a2a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001a2e:	f04f 0102 	mov.w	r1, #2
 8001a32:	6191      	str	r1, [r2, #24]
 8001a34:	f240 0200 	movw	r2, #0
 8001a38:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001a3c:	f04f 0102 	mov.w	r1, #2
 8001a40:	6191      	str	r1, [r2, #24]
 8001a42:	f240 4200 	movw	r2, #1024	; 0x400
 8001a46:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001a4a:	f04f 0120 	mov.w	r1, #32
 8001a4e:	6191      	str	r1, [r2, #24]
 8001a50:	f240 4200 	movw	r2, #1024	; 0x400
 8001a54:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001a58:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a5c:	6191      	str	r1, [r2, #24]
 8001a5e:	f640 0200 	movw	r2, #2048	; 0x800
 8001a62:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001a66:	f04f 0104 	mov.w	r1, #4
 8001a6a:	6191      	str	r1, [r2, #24]
 8001a6c:	f640 0200 	movw	r2, #2048	; 0x800
 8001a70:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001a74:	f04f 0110 	mov.w	r1, #16
 8001a78:	6191      	str	r1, [r2, #24]
 8001a7a:	f240 4200 	movw	r2, #1024	; 0x400
 8001a7e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001a82:	f04f 0101 	mov.w	r1, #1
 8001a86:	6191      	str	r1, [r2, #24]
 8001a88:	f640 4200 	movw	r2, #3072	; 0xc00
 8001a8c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001a90:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8001a94:	6191      	str	r1, [r2, #24]
 8001a96:	f640 4200 	movw	r2, #3072	; 0xc00
 8001a9a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001a9e:	f04f 0104 	mov.w	r1, #4
 8001aa2:	6191      	str	r1, [r2, #24]
	PORTBIT_write GPIOC_BASE,1,0			@;	01_PC1	CA_EN	-- enable cathode (active-low)
 8001aa4:	f640 0200 	movw	r2, #2048	; 0x800
 8001aa8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001aac:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8001ab0:	6191      	str	r1, [r2, #24]
	SWITCH_read GPIOC_BASE,5,GPIOA_BASE,15
 8001ab2:	f640 0200 	movw	r2, #2048	; 0x800
 8001ab6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001aba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001abe:	6191      	str	r1, [r2, #24]
 8001ac0:	f240 0200 	movw	r2, #0
 8001ac4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001ac8:	6910      	ldr	r0, [r2, #16]
 8001aca:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
 8001ace:	ea4f 30d0 	mov.w	r0, r0, lsr #15
 8001ad2:	f640 0200 	movw	r2, #2048	; 0x800
 8001ad6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001ada:	f04f 0120 	mov.w	r1, #32
 8001ade:	6191      	str	r1, [r2, #24]
	b sw_end
 8001ae0:	f000 b8cc 	b.w	8001c7c <sw_end>

08001ae4 <switch_C>:
	
	.thumb_func
switch_C:
	CATHODE_write 0,1,1,1,1,1,1,1
 8001ae4:	f640 0200 	movw	r2, #2048	; 0x800
 8001ae8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001aec:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001af0:	6191      	str	r1, [r2, #24]
 8001af2:	f240 4200 	movw	r2, #1024	; 0x400
 8001af6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001afa:	f04f 0102 	mov.w	r1, #2
 8001afe:	6191      	str	r1, [r2, #24]
 8001b00:	f240 0200 	movw	r2, #0
 8001b04:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001b08:	f04f 0102 	mov.w	r1, #2
 8001b0c:	6191      	str	r1, [r2, #24]
 8001b0e:	f240 4200 	movw	r2, #1024	; 0x400
 8001b12:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001b16:	f04f 0120 	mov.w	r1, #32
 8001b1a:	6191      	str	r1, [r2, #24]
 8001b1c:	f240 4200 	movw	r2, #1024	; 0x400
 8001b20:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001b24:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b28:	6191      	str	r1, [r2, #24]
 8001b2a:	f640 0200 	movw	r2, #2048	; 0x800
 8001b2e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001b32:	f04f 0104 	mov.w	r1, #4
 8001b36:	6191      	str	r1, [r2, #24]
 8001b38:	f640 0200 	movw	r2, #2048	; 0x800
 8001b3c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001b40:	f04f 0110 	mov.w	r1, #16
 8001b44:	6191      	str	r1, [r2, #24]
 8001b46:	f240 4200 	movw	r2, #1024	; 0x400
 8001b4a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001b4e:	f04f 0101 	mov.w	r1, #1
 8001b52:	6191      	str	r1, [r2, #24]
 8001b54:	f640 4200 	movw	r2, #3072	; 0xc00
 8001b58:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001b5c:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8001b60:	6191      	str	r1, [r2, #24]
 8001b62:	f640 4200 	movw	r2, #3072	; 0xc00
 8001b66:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001b6a:	f04f 0104 	mov.w	r1, #4
 8001b6e:	6191      	str	r1, [r2, #24]
	PORTBIT_write GPIOC_BASE,1,0			@;	01_PC1	CA_EN	-- enable cathode (active-low)
 8001b70:	f640 0200 	movw	r2, #2048	; 0x800
 8001b74:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001b78:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8001b7c:	6191      	str	r1, [r2, #24]
	SWITCH_read GPIOC_BASE,5,GPIOC_BASE,8
 8001b7e:	f640 0200 	movw	r2, #2048	; 0x800
 8001b82:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001b86:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001b8a:	6191      	str	r1, [r2, #24]
 8001b8c:	f640 0200 	movw	r2, #2048	; 0x800
 8001b90:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001b94:	6910      	ldr	r0, [r2, #16]
 8001b96:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8001b9a:	ea4f 2010 	mov.w	r0, r0, lsr #8
 8001b9e:	f640 0200 	movw	r2, #2048	; 0x800
 8001ba2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001ba6:	f04f 0120 	mov.w	r1, #32
 8001baa:	6191      	str	r1, [r2, #24]
	b sw_end
 8001bac:	f000 b866 	b.w	8001c7c <sw_end>

08001bb0 <switch_D>:
	
	.thumb_func
switch_D:
	CATHODE_write 1,1,0,1,1,1,1,1
 8001bb0:	f640 0200 	movw	r2, #2048	; 0x800
 8001bb4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001bb8:	f04f 0120 	mov.w	r1, #32
 8001bbc:	6191      	str	r1, [r2, #24]
 8001bbe:	f240 4200 	movw	r2, #1024	; 0x400
 8001bc2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001bc6:	f04f 0102 	mov.w	r1, #2
 8001bca:	6191      	str	r1, [r2, #24]
 8001bcc:	f240 0200 	movw	r2, #0
 8001bd0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001bd4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8001bd8:	6191      	str	r1, [r2, #24]
 8001bda:	f240 4200 	movw	r2, #1024	; 0x400
 8001bde:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001be2:	f04f 0120 	mov.w	r1, #32
 8001be6:	6191      	str	r1, [r2, #24]
 8001be8:	f240 4200 	movw	r2, #1024	; 0x400
 8001bec:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001bf0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bf4:	6191      	str	r1, [r2, #24]
 8001bf6:	f640 0200 	movw	r2, #2048	; 0x800
 8001bfa:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001bfe:	f04f 0104 	mov.w	r1, #4
 8001c02:	6191      	str	r1, [r2, #24]
 8001c04:	f640 0200 	movw	r2, #2048	; 0x800
 8001c08:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001c0c:	f04f 0110 	mov.w	r1, #16
 8001c10:	6191      	str	r1, [r2, #24]
 8001c12:	f240 4200 	movw	r2, #1024	; 0x400
 8001c16:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001c1a:	f04f 0101 	mov.w	r1, #1
 8001c1e:	6191      	str	r1, [r2, #24]
 8001c20:	f640 4200 	movw	r2, #3072	; 0xc00
 8001c24:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001c28:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8001c2c:	6191      	str	r1, [r2, #24]
 8001c2e:	f640 4200 	movw	r2, #3072	; 0xc00
 8001c32:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001c36:	f04f 0104 	mov.w	r1, #4
 8001c3a:	6191      	str	r1, [r2, #24]
	PORTBIT_write GPIOC_BASE,1,0			@;	01_PC1	CA_EN	-- enable cathode (active-low)
 8001c3c:	f640 0200 	movw	r2, #2048	; 0x800
 8001c40:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001c44:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8001c48:	6191      	str	r1, [r2, #24]
	SWITCH_read GPIOA_BASE,1,GPIOA_BASE,15
 8001c4a:	f240 0200 	movw	r2, #0
 8001c4e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001c52:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8001c56:	6191      	str	r1, [r2, #24]
 8001c58:	f240 0200 	movw	r2, #0
 8001c5c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001c60:	6910      	ldr	r0, [r2, #16]
 8001c62:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
 8001c66:	ea4f 30d0 	mov.w	r0, r0, lsr #15
 8001c6a:	f240 0200 	movw	r2, #0
 8001c6e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001c72:	f04f 0102 	mov.w	r1, #2
 8001c76:	6191      	str	r1, [r2, #24]
	b sw_end
 8001c78:	f000 b800 	b.w	8001c7c <sw_end>

08001c7c <sw_end>:
sw_end: 
	@;PORTBIT_write GPIOC_BASE,1,0			@;	01_PC1	CA_EN	-- enable cathode (active-low)
	@;PORTBIT_write GPIOB_BASE,4,0			@;	01_PB4	AN_EN	-- enable anode   (active-low)
	@;bx lr
	@;b cont
	push {r0,r1,r2,r3,lr}
 8001c7c:	b50f      	push	{r0, r1, r2, r3, lr}
	bl asm_vdisplay
 8001c7e:	f000 f804 	bl	8001c8a <asm_vdisplay>
	pop {r0,r1,r2,r3,lr}
 8001c82:	e8bd 400f 	ldmia.w	sp!, {r0, r1, r2, r3, lr}
	b cont
 8001c86:	f000 b883 	b.w	8001d90 <cont>

08001c8a <asm_vdisplay>:
	
	.global asm_vdisplay
	.thumb_func
asm_vdisplay:
	ldr r0,=vdisplay
 8001c8a:	4876      	ldr	r0, [pc, #472]	; (8001e64 <hw8_end+0x6>)
	ldr r3,=mux
 8001c8c:	4b76      	ldr	r3, [pc, #472]	; (8001e68 <hw8_end+0xa>)
	ldrh r1,[r3]
 8001c8e:	8819      	ldrh	r1, [r3, #0]
	
	ldr r2, [r0, r1, lsl #2]
 8001c90:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
	add r1,r1,#1
 8001c94:	f101 0101 	add.w	r1, r1, #1
	
	cmp r1,#4
 8001c98:	2904      	cmp	r1, #4
	ite ge
 8001c9a:	bfac      	ite	ge
	movwge r0,#0
 8001c9c:	f240 0000 	movwge	r0, #0
	movlt r0,r1
 8001ca0:	4608      	movlt	r0, r1
	str r0,[r3]
 8001ca2:	6018      	str	r0, [r3, #0]
	
	@;mov r1,r0
	mov r0,r2
 8001ca4:	4610      	mov	r0, r2
	
	b asm_print_digit
 8001ca6:	f7fe bc7e 	b.w	80005a6 <asm_print_digit>

08001caa <update_state>:
	@; r0 - Switch #
	@; r1 - Raw Press: 0/1 (0 IS PRESSED)
	@; r2 - 
	@; r3 - 

	ldr r3,=sw_states
 8001caa:	4b70      	ldr	r3, [pc, #448]	; (8001e6c <hw8_end+0xe>)
	ldr r2, [r3, r0, lsl #2]
 8001cac:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
	
	tbb [pc,r2]
 8001cb0:	e8df f002 	tbb	[pc, r2]

08001cb4 <STATE_table>:
 8001cb4:	2a1b0c03 	.word	0x2a1b0c03
 8001cb8:	4233      	.short	0x4233

08001cba <state_START>:
	.byte ((state_C - STATE_table)/2)
	.byte ((state_D - STATE_table)/2)
	
	.thumb_func
state_START:
	cmp r1,#0
 8001cba:	2900      	cmp	r1, #0
	bne loop_cont
 8001cbc:	f040 806d 	bne.w	8001d9a <loop_cont>
	movw r2,ST_A	@; advance to state A
 8001cc0:	f240 0201 	movw	r2, #1
	str r2, [r3, r0, lsl #2]
 8001cc4:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
	b loop_cont
 8001cc8:	f000 b867 	b.w	8001d9a <loop_cont>

08001ccc <state_A>:
	
	
	.thumb_func
state_A:
	cmp r1,#0
 8001ccc:	2900      	cmp	r1, #0
	bne a_ne
 8001cce:	f040 8006 	bne.w	8001cde <a_ne>
	movw r2,ST_B	@; advance to state B
 8001cd2:	f240 0202 	movw	r2, #2
	str r2, [r3, r0, lsl #2]
 8001cd6:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
	b loop_cont
 8001cda:	f000 b85e 	b.w	8001d9a <loop_cont>

08001cde <a_ne>:
a_ne:
	@;push {r4,r5}
	movw r2,ST_Up	@; retreat to state START
 8001cde:	f240 0200 	movw	r2, #0
	str r2, [r3, r0, lsl #2]
 8001ce2:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
	@;pop {r4,r5}
	b loop_cont
 8001ce6:	f000 b858 	b.w	8001d9a <loop_cont>

08001cea <state_B>:
	
	.thumb_func
state_B:
	cmp r1,#0
 8001cea:	2900      	cmp	r1, #0
	bne b_ne
 8001cec:	f040 8006 	bne.w	8001cfc <b_ne>
	movw r2,ST_Down	@; advance to state PRESS
 8001cf0:	f240 0203 	movw	r2, #3
	str r2, [r3, r0, lsl #2]
 8001cf4:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
	b get_switch_save
 8001cf8:	f000 b82d 	b.w	8001d56 <get_switch_save>

08001cfc <b_ne>:
b_ne:
	movw r2,ST_Up	@; retreat to state START
 8001cfc:	f240 0200 	movw	r2, #0
	str r2, [r3, r0, lsl #2]
 8001d00:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
	b loop_cont
 8001d04:	f000 b849 	b.w	8001d9a <loop_cont>

08001d08 <state_PRESS>:
	
	.thumb_func
state_PRESS:
	cmp r1,#0
 8001d08:	2900      	cmp	r1, #0
	beq loop_cont
 8001d0a:	f000 8046 	beq.w	8001d9a <loop_cont>
	movw r2,ST_C	@; advance to state C
 8001d0e:	f240 0204 	movw	r2, #4
	str r2, [r3, r0, lsl #2]
 8001d12:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
	b loop_cont
 8001d16:	f000 b840 	b.w	8001d9a <loop_cont>

08001d1a <state_C>:
	
	.thumb_func
state_C:
	cmp r1,#0
 8001d1a:	2900      	cmp	r1, #0
	bne c_ne
 8001d1c:	f040 8006 	bne.w	8001d2c <c_ne>
	movw r2,ST_Down	@; retreat to state PRESS
 8001d20:	f240 0203 	movw	r2, #3
	str r2, [r3, r0, lsl #2]
 8001d24:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
	b loop_cont
 8001d28:	f000 b837 	b.w	8001d9a <loop_cont>

08001d2c <c_ne>:
c_ne:
	movw r2,ST_D	@; advance to state D
 8001d2c:	f240 0205 	movw	r2, #5
	str r2, [r3, r0, lsl #2]
 8001d30:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
	b loop_cont
 8001d34:	f000 b831 	b.w	8001d9a <loop_cont>

08001d38 <state_D>:
	
	.thumb_func
state_D:
	cmp r1,#0
 8001d38:	2900      	cmp	r1, #0
	bne d_ne
 8001d3a:	f040 8006 	bne.w	8001d4a <d_ne>
	movw r2,ST_Down	@; retreat to state PRESS
 8001d3e:	f240 0203 	movw	r2, #3
	str r2, [r3, r0, lsl #2]
 8001d42:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
	b loop_cont
 8001d46:	f000 b828 	b.w	8001d9a <loop_cont>

08001d4a <d_ne>:
d_ne:
	movw r2,ST_Up	@; advance to state START
 8001d4a:	f240 0200 	movw	r2, #0
	str r2, [r3, r0, lsl #2]
 8001d4e:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
	b get_switch_save
 8001d52:	f000 b800 	b.w	8001d56 <get_switch_save>

08001d56 <get_switch_save>:
	
get_switch_save:
	@; r0 - Switch number
	@; r1 - Raw Press: 0/1 (0 IS PRESSED)
	
	eor r1,r1,#1
 8001d56:	f081 0101 	eor.w	r1, r1, #1
	
	movw r2,#0
 8001d5a:	f240 0200 	movw	r2, #0
	orr r2,r2,r1
 8001d5e:	ea42 0201 	orr.w	r2, r2, r1
	
	pop {r0}
 8001d62:	bc01      	pop	{r0}
	add r1,r0,#1	@; r0 is technically sw# - 1
 8001d64:	f100 0101 	add.w	r1, r0, #1
	push {r0}
 8001d68:	b401      	push	{r0}
	lsl r1,r1,#1
 8001d6a:	ea4f 0141 	mov.w	r1, r1, lsl #1
	orr r2,r2,r1
 8001d6e:	ea42 0201 	orr.w	r2, r2, r1
	
	@;push {r1}
	ldr r0,=outarray
 8001d72:	483f      	ldr	r0, [pc, #252]	; (8001e70 <hw8_end+0x12>)
	str r2, [r0]
 8001d74:	6002      	str	r2, [r0, #0]
	@;pop {r1}
	@;ldr r0,=vdisplay
	@;mov r2,#1
	@;str r1, [r0, r2, lsl #2]
	
	push {lr}
 8001d76:	b500      	push	{lr}
	bl queue
 8001d78:	f000 feea 	bl	8002b50 <queue>
	pop {lr}
 8001d7c:	f85d eb04 	ldr.w	lr, [sp], #4
	
	b loop_cont
 8001d80:	f000 b80b 	b.w	8001d9a <loop_cont>

08001d84 <asm_get_switch>:
	
	
	.global asm_get_switch
	.thumb_func
asm_get_switch:
	push {lr}
 8001d84:	b500      	push	{lr}
	@;ldrh r1,=asmticks
	@;ldr r2,[r1]
	@;add r2,r2,#1
	@;str r2,[r1]
	
	movw r0, #0
 8001d86:	f240 0000 	movw	r0, #0

08001d8a <get_switch_loop>:
	
get_switch_loop:
	push {r0}
 8001d8a:	b401      	push	{r0}
	b asm_set_switch  @; makes it dim
 8001d8c:	f7ff ba2b 	b.w	80011e6 <asm_set_switch>

08001d90 <cont>:
cont:
	@;DEBUG_cmp 0
	mov r1,r0
 8001d90:	4601      	mov	r1, r0
	pop {r0}
 8001d92:	bc01      	pop	{r0}
	push {r0}
 8001d94:	b401      	push	{r0}
	b update_state
 8001d96:	f7ff bf88 	b.w	8001caa <update_state>

08001d9a <loop_cont>:
loop_cont:
	pop {r0}
 8001d9a:	bc01      	pop	{r0}
	add r0,r0,#1
 8001d9c:	f100 0001 	add.w	r0, r0, #1
	cmp r0,#13
 8001da0:	280d      	cmp	r0, #13
	blt get_switch_loop
 8001da2:	f6ff aff2 	blt.w	8001d8a <get_switch_loop>

08001da6 <get_switch_end>:

get_switch_end:
	pop {lr}
 8001da6:	f85d eb04 	ldr.w	lr, [sp], #4
	bx lr
 8001daa:	4770      	bx	lr

08001dac <screw_it>:
	
	
	.global screw_it
	.thumb_func
screw_it:
	push {lr}
 8001dac:	b500      	push	{lr}
	
	ldr r2,=fifo
 8001dae:	4a31      	ldr	r2, [pc, #196]	; (8001e74 <hw8_end+0x16>)
	ldm r2,{r0,r1}
 8001db0:	e892 0003 	ldmia.w	r2, {r0, r1}
	ldr r3,=vdisplay
 8001db4:	4b2b      	ldr	r3, [pc, #172]	; (8001e64 <hw8_end+0x6>)
	
	cmp r0,#0
 8001db6:	2800      	cmp	r0, #0
	beq ayyy
 8001db8:	f000 8006 	beq.w	8001dc8 <ayyy>
	mov r2,#2
 8001dbc:	f04f 0202 	mov.w	r2, #2
	str r1, [r3, r2, lsl #2]
 8001dc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	b screw_end
 8001dc4:	f000 b804 	b.w	8001dd0 <screw_end>

08001dc8 <ayyy>:
	
ayyy:
	mov r2,#0
 8001dc8:	f04f 0200 	mov.w	r2, #0
	str r1, [r3, r2, lsl #2]
 8001dcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

08001dd0 <screw_end>:

screw_end:
	pop {lr}
 8001dd0:	f85d eb04 	ldr.w	lr, [sp], #4
	bx lr
 8001dd4:	4770      	bx	lr

08001dd6 <asm_hw8_stuff>:


	.global asm_hw8_stuff
	.thumb_func
asm_hw8_stuff:
	push {lr}
 8001dd6:	b500      	push	{lr}
	
	ldr r2,=fifo
 8001dd8:	4a26      	ldr	r2, [pc, #152]	; (8001e74 <hw8_end+0x16>)
	ldm r2,{r0,r1}
 8001dda:	e892 0003 	ldmia.w	r2, {r0, r1}
	ldr r3,=vdisplay
 8001dde:	4b21      	ldr	r3, [pc, #132]	; (8001e64 <hw8_end+0x6>)
	
	cmp r0,#0
 8001de0:	2800      	cmp	r0, #0
	beq hw8_release
 8001de2:	f000 801f 	beq.w	8001e24 <hw8_release>
	
@;press
	cmp r1,#1
 8001de6:	2901      	cmp	r1, #1
	itt eq
 8001de8:	bf04      	itt	eq
	moveq r2,#0
 8001dea:	2200      	moveq	r2, #0
	beq hw8_press_cont
 8001dec:	f000 b811 	beq.w	8001e12 <hw8_press_cont>
	
	cmp r1,#3
 8001df0:	2903      	cmp	r1, #3
	itt eq
 8001df2:	bf04      	itt	eq
	moveq r2,#1
 8001df4:	2201      	moveq	r2, #1
	beq hw8_press_cont
 8001df6:	f000 b80c 	beq.w	8001e12 <hw8_press_cont>

	cmp r1,#5
 8001dfa:	2905      	cmp	r1, #5
	itt eq
 8001dfc:	bf04      	itt	eq
	moveq r2,#2
 8001dfe:	2202      	moveq	r2, #2
	beq hw8_press_cont
 8001e00:	f000 b807 	beq.w	8001e12 <hw8_press_cont>
	
	cmp r1,#7
 8001e04:	2907      	cmp	r1, #7
	itt eq
 8001e06:	bf04      	itt	eq
	moveq r2,#3
 8001e08:	2203      	moveq	r2, #3
	beq hw8_press_cont
 8001e0a:	f000 b802 	beq.w	8001e12 <hw8_press_cont>
	
	b hw8_end
 8001e0e:	f000 b826 	b.w	8001e5e <hw8_end>

08001e12 <hw8_press_cont>:

hw8_press_cont:
	ldr r1, [r3, r2, lsl #2]
 8001e12:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
	cmp r1,#15
 8001e16:	290f      	cmp	r1, #15
	it lt
 8001e18:	bfb8      	it	lt
	addlt r1,r1,#1
 8001e1a:	3101      	addlt	r1, #1
	str r1, [r3, r2, lsl #2]
 8001e1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	b hw8_end
 8001e20:	f000 b81d 	b.w	8001e5e <hw8_end>

08001e24 <hw8_release>:
	
hw8_release:
	cmp r1,#2
 8001e24:	2902      	cmp	r1, #2
	itt eq
 8001e26:	bf04      	itt	eq
	moveq r2,#0
 8001e28:	2200      	moveq	r2, #0
	beq hw8_release_cont
 8001e2a:	f000 b811 	beq.w	8001e50 <hw8_release_cont>
	
	cmp r1,#4
 8001e2e:	2904      	cmp	r1, #4
	itt eq
 8001e30:	bf04      	itt	eq
	moveq r2,#1
 8001e32:	2201      	moveq	r2, #1
	beq hw8_release_cont
 8001e34:	f000 b80c 	beq.w	8001e50 <hw8_release_cont>

	cmp r1,#6
 8001e38:	2906      	cmp	r1, #6
	itt eq
 8001e3a:	bf04      	itt	eq
	moveq r2,#2
 8001e3c:	2202      	moveq	r2, #2
	beq hw8_release_cont
 8001e3e:	f000 b807 	beq.w	8001e50 <hw8_release_cont>
	
	cmp r1,#8
 8001e42:	2908      	cmp	r1, #8
	itt eq
 8001e44:	bf04      	itt	eq
	moveq r2,#3
 8001e46:	2203      	moveq	r2, #3
	beq hw8_release_cont
 8001e48:	f000 b802 	beq.w	8001e50 <hw8_release_cont>
	
	b hw8_end
 8001e4c:	f000 b807 	b.w	8001e5e <hw8_end>

08001e50 <hw8_release_cont>:
hw8_release_cont:
	ldr r1, [r3, r2, lsl #2]
 8001e50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
	cmp r1,#0
 8001e54:	2900      	cmp	r1, #0
	it gt
 8001e56:	bfc8      	it	gt
	subgt r1,r1,#1
 8001e58:	3901      	subgt	r1, #1
	str r1, [r3, r2, lsl #2]
 8001e5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

08001e5e <hw8_end>:

hw8_end:
	pop {lr}
 8001e5e:	f85d eb04 	ldr.w	lr, [sp], #4
	bx lr
 8001e62:	4770      	bx	lr
	b cont
	
	.global asm_vdisplay
	.thumb_func
asm_vdisplay:
	ldr r0,=vdisplay
 8001e64:	200002a4 	.word	0x200002a4
	ldr r3,=mux
 8001e68:	20000058 	.word	0x20000058
	@; r0 - Switch #
	@; r1 - Raw Press: 0/1 (0 IS PRESSED)
	@; r2 - 
	@; r3 - 

	ldr r3,=sw_states
 8001e6c:	20000060 	.word	0x20000060
	push {r0}
	lsl r1,r1,#1
	orr r2,r2,r1
	
	@;push {r1}
	ldr r0,=outarray
 8001e70:	200002e0 	.word	0x200002e0
	.global screw_it
	.thumb_func
screw_it:
	push {lr}
	
	ldr r2,=fifo
 8001e74:	20000318 	.word	0x20000318

08001e78 <DMA1Stream5int_svc>:
	.equ locTEIF5,	 9	@; ""          				transfer error interrupt flag 	 ""
	.equ locDMEIF5,	 8	@; ""                       direct mode error interrupt  flag ""
	.equ locFEIF6,	 6	@; ""                       fifo error interrupt flag          ""
	.equ locCT,		19	@;location of 'current target' (CT) status bit in DMA1 stream 5 control register DMA1_S6CR
	
	push {r4-r6}
 8001e78:	b470      	push	{r4, r5, r6}
	
	@;earlier (non-interrupt) version polls TCIF5 to detect switch between buffers, then copies new data into currently not-selected buffer
	TST_bit	absDMA1_HISR,locTCIF5		@;did a buffer swap occur
 8001e7a:	f246 0204 	movw	r2, #24580	; 0x6004
 8001e7e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001e82:	6810      	ldr	r0, [r2, #0]
 8001e84:	f410 6000 	ands.w	r0, r0, #2048	; 0x800
 8001e88:	ea4f 20d0 	mov.w	r0, r0, lsr #11
	beq 9f								@;	no -- nothing to do, so go back
 8001e8c:	d07d      	beq.n	8001f8a <pong_end+0x1a>
	
	ldr r1,=note
 8001e8e:	f8df 1620 	ldr.w	r1, [pc, #1568]	; 80024b0 <triangle+0x400>
	ldr r6,[r1]
 8001e92:	680e      	ldr	r6, [r1, #0]
	cmp r6,#0
 8001e94:	2e00      	cmp	r6, #0
	lsl r6,#1
 8001e96:	ea4f 0646 	mov.w	r6, r6, lsl #1
	bne cont
 8001e9a:	f040 8005 	bne.w	8001ea8 <cont>
	mov r1,#0
 8001e9e:	f04f 0100 	mov.w	r1, #0
	ldr r0,=OFFSET
 8001ea2:	f8df 0610 	ldr.w	r0, [pc, #1552]	; 80024b4 <triangle+0x404>
	str r1,[r0]
 8001ea6:	6001      	str	r1, [r0, #0]

08001ea8 <cont>:
	
cont:
	adr r4,triangle						@;load triangle table
 8001ea8:	a481      	add	r4, pc, #516	; (adr r4, 80020b0 <triangle>)
	
	ldr r2,=PINGPONG_count				@;update count of number of switches between DMA buffers which have occurred
 8001eaa:	f8df 260c 	ldr.w	r2, [pc, #1548]	; 80024b8 <triangle+0x408>
	ldr r1,[r2]							@; ..
 8001eae:	6811      	ldr	r1, [r2, #0]
	add r1,#1							@; ..
 8001eb0:	f101 0101 	add.w	r1, r1, #1
	str r1,[r2]							@; ..
 8001eb4:	6011      	str	r1, [r2, #0]
	
	@;here if DMA has switched to the other buffer
	SET_bit absDMA1_HIFCR,locTCIF5		@;reset the interrupt flag
 8001eb6:	f246 020c 	movw	r2, #24588	; 0x600c
 8001eba:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001ebe:	6811      	ldr	r1, [r2, #0]
 8001ec0:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8001ec4:	6011      	str	r1, [r2, #0]
	TST_bit absDMA1_S5CR,locCT			@;is buffer 0 now being processed?
 8001ec6:	f246 0288 	movw	r2, #24712	; 0x6088
 8001eca:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001ece:	6810      	ldr	r0, [r2, #0]
 8001ed0:	f410 2000 	ands.w	r0, r0, #524288	; 0x80000
 8001ed4:	ea4f 40d0 	mov.w	r0, r0, lsr #19
	@;beq 1f								@;	yes -- so go update buffer 1
	bne ping
 8001ed8:	f040 8002 	bne.w	8001ee0 <ping>
	beq pong
 8001edc:	f000 8028 	beq.w	8001f30 <pong>

08001ee0 <ping>:
	
ping:
	@;ldr r2,=PINGPONG_count				@;
	@;ldr r1,[r2]							@; ..
	@;ands r3,r1,#0xF
	ldr r5,=PINGBUF						@;prepare the PING buffer for transaction
 8001ee0:	f8df 55d8 	ldr.w	r5, [pc, #1496]	; 80024bc <triangle+0x40c>
	push {r5}
 8001ee4:	b420      	push	{r5}
	@;mov r6,r5
	
	ldr r3,=OFFSET						@;pick up where left off
 8001ee6:	f8df 35cc 	ldr.w	r3, [pc, #1484]	; 80024b4 <triangle+0x404>
	ldrh r2,[r3]						@; ..
 8001eea:	881a      	ldrh	r2, [r3, #0]
	cmp r2,#1024
 8001eec:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
	it ge
 8001ef0:	bfa8      	it	ge
	@;subge r2,#1024
	movge r2,#0
 8001ef2:	2200      	movge	r2, #0
	add r4,r2							@; ..	
 8001ef4:	4414      	add	r4, r2
	
	mov r1,#0
 8001ef6:	f04f 0100 	mov.w	r1, #0

08001efa <ping_loop>:

ping_loop:
	cmp r1,#16							@; i <= 16 ? cont : kill
 8001efa:	2910      	cmp	r1, #16
	beq ping_end
 8001efc:	f000 8010 	beq.w	8001f20 <ping_end>
	ldrh r0,[r4]						@;start filling PING with triangle data
 8001f00:	8820      	ldrh	r0, [r4, #0]
	add r4,r6
 8001f02:	4434      	add	r4, r6
	strh r0,[r5],#2						@; ..
 8001f04:	f825 0b02 	strh.w	r0, [r5], #2
	
	add r2,r6							@;update offset
 8001f08:	4432      	add	r2, r6
	cmp r2,#1024
 8001f0a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
	itt ge
 8001f0e:	bfa4      	itt	ge
	subge r2,#1024
 8001f10:	f5a2 6280 	subge.w	r2, r2, #1024	; 0x400
	subge r4,#1024
 8001f14:	f5a4 6480 	subge.w	r4, r4, #1024	; 0x400
	@;movge r2,#0
	add r1,#1							@;i++
 8001f18:	f101 0101 	add.w	r1, r1, #1
	b ping_loop
 8001f1c:	f7ff bfed 	b.w	8001efa <ping_loop>

08001f20 <ping_end>:
	
ping_end:
	str r2,[r3]							@;save OFFSET
 8001f20:	601a      	str	r2, [r3, #0]
	@;ldr r5,=PINGBUF						@;reload the PING address
	MOV_imm32 r2,absDMA1_S5M0AR			@;first buffer where DMA1 will get its data
 8001f22:	f246 0294 	movw	r2, #24724	; 0x6094
 8001f26:	f2c4 0202 	movt	r2, #16386	; 0x4002
	pop {r5}
 8001f2a:	bc20      	pop	{r5}
	str r5,[r2]
 8001f2c:	6015      	str	r5, [r2, #0]
	b 9f
 8001f2e:	e02c      	b.n	8001f8a <pong_end+0x1a>

08001f30 <pong>:
	
pong:
	@;ldr r2,=PINGPONG_count				@;
	@;ldr r1,[r2]							@; ..
	@;ands r3,r1,#0xF
	ldr r5,=PONGBUF						@;prepare the PING buffer for transaction
 8001f30:	f8df 558c 	ldr.w	r5, [pc, #1420]	; 80024c0 <triangle+0x410>
	push {r5}
 8001f34:	b420      	push	{r5}
	@;mov r6,r5	@; copy
	
	ldr r3,=OFFSET						@;pick up where left off
 8001f36:	f8df 357c 	ldr.w	r3, [pc, #1404]	; 80024b4 <triangle+0x404>
	ldrh r2,[r3]						@; ..
 8001f3a:	881a      	ldrh	r2, [r3, #0]
	cmp r2,#1024
 8001f3c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
	it ge
 8001f40:	bfa8      	it	ge
	@;subge r2,#1024
	movge r2,#0
 8001f42:	2200      	movge	r2, #0
	add r4,r2							@; ..	
 8001f44:	4414      	add	r4, r2
	
	mov r1,#0
 8001f46:	f04f 0100 	mov.w	r1, #0

08001f4a <pong_loop>:

pong_loop:
	cmp r1,#16							@; i <= 16 ? cont : kill
 8001f4a:	2910      	cmp	r1, #16
	beq pong_end
 8001f4c:	f000 8010 	beq.w	8001f70 <pong_end>
	ldrh r0,[r4]						@;start filling PONG with triangle data
 8001f50:	8820      	ldrh	r0, [r4, #0]
	add r4,r6
 8001f52:	4434      	add	r4, r6
	strh r0,[r5],#2						@; ..
 8001f54:	f825 0b02 	strh.w	r0, [r5], #2
	
	add r2,r6							@;update offset
 8001f58:	4432      	add	r2, r6
	cmp r2,#1024
 8001f5a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
	itt ge
 8001f5e:	bfa4      	itt	ge
	subge r2,#1024
 8001f60:	f5a2 6280 	subge.w	r2, r2, #1024	; 0x400
	subge r4,#1024
 8001f64:	f5a4 6480 	subge.w	r4, r4, #1024	; 0x400
	@;movge r2,#0
	add r1,#1							@;i++
 8001f68:	f101 0101 	add.w	r1, r1, #1
	b pong_loop
 8001f6c:	f7ff bfed 	b.w	8001f4a <pong_loop>

08001f70 <pong_end>:
	
pong_end:
	str r2,[r3]							@;save OFFSET
 8001f70:	601a      	str	r2, [r3, #0]
	@;ldr r5,=PONGBUF						@;reload the PING address
	MOV_imm32 r2,absDMA1_S5M1AR			@;first buffer where DMA1 will get its data
 8001f72:	f246 0298 	movw	r2, #24728	; 0x6098
 8001f76:	f2c4 0202 	movt	r2, #16386	; 0x4002
	pop {r5}
 8001f7a:	bc20      	pop	{r5}
	str r5,[r2]
 8001f7c:	6015      	str	r5, [r2, #0]
	b 9f
 8001f7e:	e004      	b.n	8001f8a <pong_end+0x1a>
	@;ldr r0,=PINGBUF
	@;str r1,[r0]
	@;ldr r0,=PONGBUF
	@;str r1,[r0]
	
	mov r1,#0
 8001f80:	f04f 0100 	mov.w	r1, #0
	ldr r0,=OFFSET
 8001f84:	f8df 052c 	ldr.w	r0, [pc, #1324]	; 80024b4 <triangle+0x404>
	str r1,[r0]
 8001f88:	6001      	str	r1, [r0, #0]

9:	@;here when terminal count interrupt flag TCIF was not set ==> nothing to do
	pop {r4-r6}
 8001f8a:	bc70      	pop	{r4, r5, r6}
	bx lr
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop

08001f90 <DMADEMO_PINGBUF>:
 8001f90:	01000000 	.word	0x01000000
 8001f94:	03000200 	.word	0x03000200
 8001f98:	05000400 	.word	0x05000400
 8001f9c:	07000600 	.word	0x07000600
 8001fa0:	09000800 	.word	0x09000800
 8001fa4:	0b000a00 	.word	0x0b000a00
 8001fa8:	0d000c00 	.word	0x0d000c00
 8001fac:	0f000e00 	.word	0x0f000e00

08001fb0 <DMADEMO_PONGBUF>:
 8001fb0:	0eff0fff 	.word	0x0eff0fff
 8001fb4:	0cff0dff 	.word	0x0cff0dff
 8001fb8:	0aff0bff 	.word	0x0aff0bff
 8001fbc:	08ff09ff 	.word	0x08ff09ff
 8001fc0:	06ff07ff 	.word	0x06ff07ff
 8001fc4:	04ff05ff 	.word	0x04ff05ff
 8001fc8:	02ff03ff 	.word	0x02ff03ff
 8001fcc:	00ff01ff 	.word	0x00ff01ff

08001fd0 <DMADEMO_PINGBUF1>:
	...
 8001fe0:	0fff0fff 	.word	0x0fff0fff
 8001fe4:	0fff0fff 	.word	0x0fff0fff
 8001fe8:	0fff0fff 	.word	0x0fff0fff
 8001fec:	0fff0fff 	.word	0x0fff0fff

08001ff0 <DMADEMO_PONGBUF1>:
 8001ff0:	0fff0fff 	.word	0x0fff0fff
 8001ff4:	0fff0fff 	.word	0x0fff0fff
 8001ff8:	0fff0fff 	.word	0x0fff0fff
 8001ffc:	0fff0fff 	.word	0x0fff0fff
	...

08002010 <ZEROS>:
	...

08002030 <TRI_UP>:
 8002030:	0f100f00 	.word	0x0f100f00
 8002034:	0f300f20 	.word	0x0f300f20
 8002038:	0f500f40 	.word	0x0f500f40
 800203c:	0f700f60 	.word	0x0f700f60
 8002040:	0f900f80 	.word	0x0f900f80
 8002044:	0fb00fa0 	.word	0x0fb00fa0
 8002048:	0fd00fc0 	.word	0x0fd00fc0
 800204c:	0ff00fe0 	.word	0x0ff00fe0

08002050 <TRI_DOWN>:
 8002050:	0fef0fff 	.word	0x0fef0fff
 8002054:	0fcf0fdf 	.word	0x0fcf0fdf
 8002058:	0faf0fbf 	.word	0x0faf0fbf
 800205c:	0f8f0f9f 	.word	0x0f8f0f9f
 8002060:	0f6f0f7f 	.word	0x0f6f0f7f
 8002064:	0f4f0f5f 	.word	0x0f4f0f5f
 8002068:	0f2f0f3f 	.word	0x0f2f0f3f
 800206c:	0f0f0f1f 	.word	0x0f0f0f1f

08002070 <SQ_DOWN>:
 8002070:	0eff0fff 	.word	0x0eff0fff
 8002074:	0cff0dff 	.word	0x0cff0dff
 8002078:	0aff0bff 	.word	0x0aff0bff
 800207c:	08ff09ff 	.word	0x08ff09ff
 8002080:	06ff07ff 	.word	0x06ff07ff
 8002084:	04ff05ff 	.word	0x04ff05ff
 8002088:	02ff03ff 	.word	0x02ff03ff
 800208c:	00ff01ff 	.word	0x00ff01ff

08002090 <SQ_UP>:
 8002090:	01000000 	.word	0x01000000
 8002094:	03000200 	.word	0x03000200
 8002098:	05000400 	.word	0x05000400
 800209c:	07000600 	.word	0x07000600
 80020a0:	09000800 	.word	0x09000800
 80020a4:	0b000a00 	.word	0x0b000a00
 80020a8:	0d000c00 	.word	0x0d000c00
 80020ac:	0f000e00 	.word	0x0f000e00

080020b0 <triangle>:
 80020b0:	00100000 	.word	0x00100000
 80020b4:	00300020 	.word	0x00300020
 80020b8:	00500040 	.word	0x00500040
 80020bc:	00700060 	.word	0x00700060
 80020c0:	00900080 	.word	0x00900080
 80020c4:	00b000a0 	.word	0x00b000a0
 80020c8:	00d000c0 	.word	0x00d000c0
 80020cc:	00f000e0 	.word	0x00f000e0
 80020d0:	01100100 	.word	0x01100100
 80020d4:	01300120 	.word	0x01300120
 80020d8:	01500140 	.word	0x01500140
 80020dc:	01700160 	.word	0x01700160
 80020e0:	01900180 	.word	0x01900180
 80020e4:	01b001a0 	.word	0x01b001a0
 80020e8:	01d001c0 	.word	0x01d001c0
 80020ec:	01f001e0 	.word	0x01f001e0
 80020f0:	02100200 	.word	0x02100200
 80020f4:	02300220 	.word	0x02300220
 80020f8:	02500240 	.word	0x02500240
 80020fc:	02700260 	.word	0x02700260
 8002100:	02900280 	.word	0x02900280
 8002104:	02b002a0 	.word	0x02b002a0
 8002108:	02d002c0 	.word	0x02d002c0
 800210c:	02f002e0 	.word	0x02f002e0
 8002110:	03100300 	.word	0x03100300
 8002114:	03300320 	.word	0x03300320
 8002118:	03500340 	.word	0x03500340
 800211c:	03700360 	.word	0x03700360
 8002120:	03900380 	.word	0x03900380
 8002124:	03b003a0 	.word	0x03b003a0
 8002128:	03d003c0 	.word	0x03d003c0
 800212c:	03f003e0 	.word	0x03f003e0
 8002130:	04100400 	.word	0x04100400
 8002134:	04300420 	.word	0x04300420
 8002138:	04500440 	.word	0x04500440
 800213c:	04700460 	.word	0x04700460
 8002140:	04900480 	.word	0x04900480
 8002144:	04b004a0 	.word	0x04b004a0
 8002148:	04d004c0 	.word	0x04d004c0
 800214c:	04f004e0 	.word	0x04f004e0
 8002150:	05100500 	.word	0x05100500
 8002154:	05300520 	.word	0x05300520
 8002158:	05500540 	.word	0x05500540
 800215c:	05700560 	.word	0x05700560
 8002160:	05900580 	.word	0x05900580
 8002164:	05b005a0 	.word	0x05b005a0
 8002168:	05d005c0 	.word	0x05d005c0
 800216c:	05f005e0 	.word	0x05f005e0
 8002170:	06100600 	.word	0x06100600
 8002174:	06300620 	.word	0x06300620
 8002178:	06500640 	.word	0x06500640
 800217c:	06700660 	.word	0x06700660
 8002180:	06900680 	.word	0x06900680
 8002184:	06b006a0 	.word	0x06b006a0
 8002188:	06d006c0 	.word	0x06d006c0
 800218c:	06f006e0 	.word	0x06f006e0
 8002190:	07100700 	.word	0x07100700
 8002194:	07300720 	.word	0x07300720
 8002198:	07500740 	.word	0x07500740
 800219c:	07700760 	.word	0x07700760
 80021a0:	07900780 	.word	0x07900780
 80021a4:	07b007a0 	.word	0x07b007a0
 80021a8:	07d007c0 	.word	0x07d007c0
 80021ac:	07f007e0 	.word	0x07f007e0
 80021b0:	08100800 	.word	0x08100800
 80021b4:	08300820 	.word	0x08300820
 80021b8:	08500840 	.word	0x08500840
 80021bc:	08700860 	.word	0x08700860
 80021c0:	08900880 	.word	0x08900880
 80021c4:	08b008a0 	.word	0x08b008a0
 80021c8:	08d008c0 	.word	0x08d008c0
 80021cc:	08f008e0 	.word	0x08f008e0
 80021d0:	09100900 	.word	0x09100900
 80021d4:	09300920 	.word	0x09300920
 80021d8:	09500940 	.word	0x09500940
 80021dc:	09700960 	.word	0x09700960
 80021e0:	09900980 	.word	0x09900980
 80021e4:	09b009a0 	.word	0x09b009a0
 80021e8:	09d009c0 	.word	0x09d009c0
 80021ec:	09f009e0 	.word	0x09f009e0
 80021f0:	0a100a00 	.word	0x0a100a00
 80021f4:	0a300a20 	.word	0x0a300a20
 80021f8:	0a500a40 	.word	0x0a500a40
 80021fc:	0a700a60 	.word	0x0a700a60
 8002200:	0a900a80 	.word	0x0a900a80
 8002204:	0ab00aa0 	.word	0x0ab00aa0
 8002208:	0ad00ac0 	.word	0x0ad00ac0
 800220c:	0af00ae0 	.word	0x0af00ae0
 8002210:	0b100b00 	.word	0x0b100b00
 8002214:	0b300b20 	.word	0x0b300b20
 8002218:	0b500b40 	.word	0x0b500b40
 800221c:	0b700b60 	.word	0x0b700b60
 8002220:	0b900b80 	.word	0x0b900b80
 8002224:	0bb00ba0 	.word	0x0bb00ba0
 8002228:	0bd00bc0 	.word	0x0bd00bc0
 800222c:	0bf00be0 	.word	0x0bf00be0
 8002230:	0c100c00 	.word	0x0c100c00
 8002234:	0c300c20 	.word	0x0c300c20
 8002238:	0c500c40 	.word	0x0c500c40
 800223c:	0c700c60 	.word	0x0c700c60
 8002240:	0c900c80 	.word	0x0c900c80
 8002244:	0cb00ca0 	.word	0x0cb00ca0
 8002248:	0cd00cc0 	.word	0x0cd00cc0
 800224c:	0cf00ce0 	.word	0x0cf00ce0
 8002250:	0d100d00 	.word	0x0d100d00
 8002254:	0d300d20 	.word	0x0d300d20
 8002258:	0d500d40 	.word	0x0d500d40
 800225c:	0d700d60 	.word	0x0d700d60
 8002260:	0d900d80 	.word	0x0d900d80
 8002264:	0db00da0 	.word	0x0db00da0
 8002268:	0dd00dc0 	.word	0x0dd00dc0
 800226c:	0df00de0 	.word	0x0df00de0
 8002270:	0e100e00 	.word	0x0e100e00
 8002274:	0e300e20 	.word	0x0e300e20
 8002278:	0e500e40 	.word	0x0e500e40
 800227c:	0e700e60 	.word	0x0e700e60
 8002280:	0e900e80 	.word	0x0e900e80
 8002284:	0eb00ea0 	.word	0x0eb00ea0
 8002288:	0ed00ec0 	.word	0x0ed00ec0
 800228c:	0ef00ee0 	.word	0x0ef00ee0
 8002290:	0f100f00 	.word	0x0f100f00
 8002294:	0f300f20 	.word	0x0f300f20
 8002298:	0f500f40 	.word	0x0f500f40
 800229c:	0f700f60 	.word	0x0f700f60
 80022a0:	0f900f80 	.word	0x0f900f80
 80022a4:	0fb00fa0 	.word	0x0fb00fa0
 80022a8:	0fd00fc0 	.word	0x0fd00fc0
 80022ac:	0ff00fe0 	.word	0x0ff00fe0
 80022b0:	0fef0fff 	.word	0x0fef0fff
 80022b4:	0fcf0fdf 	.word	0x0fcf0fdf
 80022b8:	0faf0fbf 	.word	0x0faf0fbf
 80022bc:	0f8f0f9f 	.word	0x0f8f0f9f
 80022c0:	0f6f0f7f 	.word	0x0f6f0f7f
 80022c4:	0f4f0f5f 	.word	0x0f4f0f5f
 80022c8:	0f2f0f3f 	.word	0x0f2f0f3f
 80022cc:	0f0f0f1f 	.word	0x0f0f0f1f
 80022d0:	0eef0eff 	.word	0x0eef0eff
 80022d4:	0ecf0edf 	.word	0x0ecf0edf
 80022d8:	0eaf0ebf 	.word	0x0eaf0ebf
 80022dc:	0e8f0e9f 	.word	0x0e8f0e9f
 80022e0:	0e6f0e7f 	.word	0x0e6f0e7f
 80022e4:	0e4f0e5f 	.word	0x0e4f0e5f
 80022e8:	0e2f0e3f 	.word	0x0e2f0e3f
 80022ec:	0e0f0e1f 	.word	0x0e0f0e1f
 80022f0:	0def0dff 	.word	0x0def0dff
 80022f4:	0dcf0ddf 	.word	0x0dcf0ddf
 80022f8:	0daf0dbf 	.word	0x0daf0dbf
 80022fc:	0d8f0d9f 	.word	0x0d8f0d9f
 8002300:	0d6f0d7f 	.word	0x0d6f0d7f
 8002304:	0d4f0d5f 	.word	0x0d4f0d5f
 8002308:	0d2f0d3f 	.word	0x0d2f0d3f
 800230c:	0d0f0d1f 	.word	0x0d0f0d1f
 8002310:	0cef0cff 	.word	0x0cef0cff
 8002314:	0ccf0cdf 	.word	0x0ccf0cdf
 8002318:	0caf0cbf 	.word	0x0caf0cbf
 800231c:	0c8f0c9f 	.word	0x0c8f0c9f
 8002320:	0c6f0c7f 	.word	0x0c6f0c7f
 8002324:	0c4f0c5f 	.word	0x0c4f0c5f
 8002328:	0c2f0c3f 	.word	0x0c2f0c3f
 800232c:	0c0f0c1f 	.word	0x0c0f0c1f
 8002330:	0bef0bff 	.word	0x0bef0bff
 8002334:	0bcf0bdf 	.word	0x0bcf0bdf
 8002338:	0baf0bbf 	.word	0x0baf0bbf
 800233c:	0b8f0b9f 	.word	0x0b8f0b9f
 8002340:	0b6f0b7f 	.word	0x0b6f0b7f
 8002344:	0b4f0b5f 	.word	0x0b4f0b5f
 8002348:	0b2f0b3f 	.word	0x0b2f0b3f
 800234c:	0b0f0b1f 	.word	0x0b0f0b1f
 8002350:	0aef0aff 	.word	0x0aef0aff
 8002354:	0acf0adf 	.word	0x0acf0adf
 8002358:	0aaf0abf 	.word	0x0aaf0abf
 800235c:	0a8f0a9f 	.word	0x0a8f0a9f
 8002360:	0a6f0a7f 	.word	0x0a6f0a7f
 8002364:	0a4f0a5f 	.word	0x0a4f0a5f
 8002368:	0a2f0a3f 	.word	0x0a2f0a3f
 800236c:	0a0f0a1f 	.word	0x0a0f0a1f
 8002370:	09ef09ff 	.word	0x09ef09ff
 8002374:	09cf09df 	.word	0x09cf09df
 8002378:	09af09bf 	.word	0x09af09bf
 800237c:	098f099f 	.word	0x098f099f
 8002380:	096f097f 	.word	0x096f097f
 8002384:	094f095f 	.word	0x094f095f
 8002388:	092f093f 	.word	0x092f093f
 800238c:	090f091f 	.word	0x090f091f
 8002390:	08ef08ff 	.word	0x08ef08ff
 8002394:	08cf08df 	.word	0x08cf08df
 8002398:	08af08bf 	.word	0x08af08bf
 800239c:	088f089f 	.word	0x088f089f
 80023a0:	086f087f 	.word	0x086f087f
 80023a4:	084f085f 	.word	0x084f085f
 80023a8:	082f083f 	.word	0x082f083f
 80023ac:	080f081f 	.word	0x080f081f
 80023b0:	07ef07ff 	.word	0x07ef07ff
 80023b4:	07cf07df 	.word	0x07cf07df
 80023b8:	07af07bf 	.word	0x07af07bf
 80023bc:	078f079f 	.word	0x078f079f
 80023c0:	076f077f 	.word	0x076f077f
 80023c4:	074f075f 	.word	0x074f075f
 80023c8:	072f073f 	.word	0x072f073f
 80023cc:	070f071f 	.word	0x070f071f
 80023d0:	06ef06ff 	.word	0x06ef06ff
 80023d4:	06cf06df 	.word	0x06cf06df
 80023d8:	06af06bf 	.word	0x06af06bf
 80023dc:	068f069f 	.word	0x068f069f
 80023e0:	066f067f 	.word	0x066f067f
 80023e4:	064f065f 	.word	0x064f065f
 80023e8:	062f063f 	.word	0x062f063f
 80023ec:	060f061f 	.word	0x060f061f
 80023f0:	05ef05ff 	.word	0x05ef05ff
 80023f4:	05cf05df 	.word	0x05cf05df
 80023f8:	05af05bf 	.word	0x05af05bf
 80023fc:	058f059f 	.word	0x058f059f
 8002400:	056f057f 	.word	0x056f057f
 8002404:	054f055f 	.word	0x054f055f
 8002408:	052f053f 	.word	0x052f053f
 800240c:	050f051f 	.word	0x050f051f
 8002410:	04ef04ff 	.word	0x04ef04ff
 8002414:	04cf04df 	.word	0x04cf04df
 8002418:	04af04bf 	.word	0x04af04bf
 800241c:	048f049f 	.word	0x048f049f
 8002420:	046f047f 	.word	0x046f047f
 8002424:	044f045f 	.word	0x044f045f
 8002428:	042f043f 	.word	0x042f043f
 800242c:	040f041f 	.word	0x040f041f
 8002430:	03ef03ff 	.word	0x03ef03ff
 8002434:	03cf03df 	.word	0x03cf03df
 8002438:	03af03bf 	.word	0x03af03bf
 800243c:	038f039f 	.word	0x038f039f
 8002440:	036f037f 	.word	0x036f037f
 8002444:	034f035f 	.word	0x034f035f
 8002448:	032f033f 	.word	0x032f033f
 800244c:	030f031f 	.word	0x030f031f
 8002450:	02ef02ff 	.word	0x02ef02ff
 8002454:	02cf02df 	.word	0x02cf02df
 8002458:	02af02bf 	.word	0x02af02bf
 800245c:	028f029f 	.word	0x028f029f
 8002460:	026f027f 	.word	0x026f027f
 8002464:	024f025f 	.word	0x024f025f
 8002468:	022f023f 	.word	0x022f023f
 800246c:	020f021f 	.word	0x020f021f
 8002470:	01ef01ff 	.word	0x01ef01ff
 8002474:	01cf01df 	.word	0x01cf01df
 8002478:	01af01bf 	.word	0x01af01bf
 800247c:	018f019f 	.word	0x018f019f
 8002480:	016f017f 	.word	0x016f017f
 8002484:	014f015f 	.word	0x014f015f
 8002488:	012f013f 	.word	0x012f013f
 800248c:	010f011f 	.word	0x010f011f
 8002490:	00ef00ff 	.word	0x00ef00ff
 8002494:	00cf00df 	.word	0x00cf00df
 8002498:	00af00bf 	.word	0x00af00bf
 800249c:	008f009f 	.word	0x008f009f
 80024a0:	006f007f 	.word	0x006f007f
 80024a4:	004f005f 	.word	0x004f005f
 80024a8:	002f003f 	.word	0x002f003f
 80024ac:	000f001f 	.word	0x000f001f
	
	@;earlier (non-interrupt) version polls TCIF5 to detect switch between buffers, then copies new data into currently not-selected buffer
	TST_bit	absDMA1_HISR,locTCIF5		@;did a buffer swap occur
	beq 9f								@;	no -- nothing to do, so go back
	
	ldr r1,=note
 80024b0:	2000001c 	.word	0x2000001c
	ldr r6,[r1]
	cmp r6,#0
	lsl r6,#1
	bne cont
	mov r1,#0
	ldr r0,=OFFSET
 80024b4:	20000298 	.word	0x20000298
	str r1,[r0]
	
cont:
	adr r4,triangle						@;load triangle table
	
	ldr r2,=PINGPONG_count				@;update count of number of switches between DMA buffers which have occurred
 80024b8:	200002f4 	.word	0x200002f4
	
ping:
	@;ldr r2,=PINGPONG_count				@;
	@;ldr r1,[r2]							@; ..
	@;ands r3,r1,#0xF
	ldr r5,=PINGBUF						@;prepare the PING buffer for transaction
 80024bc:	20000098 	.word	0x20000098
	
pong:
	@;ldr r2,=PINGPONG_count				@;
	@;ldr r1,[r2]							@; ..
	@;ands r3,r1,#0xF
	ldr r5,=PONGBUF						@;prepare the PING buffer for transaction
 80024c0:	20000198 	.word	0x20000198

080024c4 <TIM_Config>:
  * @brief  Configures the TIM IRQ Handler.
  * @param  None
  * @retval None
  */
void TIM_Config(void)
{
 80024c4:	b530      	push	{r4, r5, lr}
  NVIC_InitTypeDef NVIC_InitStructure;

  /* TIM3 clock enable */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 80024c6:	2101      	movs	r1, #1
  * @brief  Configures the TIM IRQ Handler.
  * @param  None
  * @retval None
  */
void TIM_Config(void)
{
 80024c8:	b083      	sub	sp, #12
  NVIC_InitTypeDef NVIC_InitStructure;

  /* TIM3 clock enable */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 80024ca:	2002      	movs	r0, #2
 80024cc:	f000 fa0c 	bl	80028e8 <RCC_APB1PeriphClockCmd>

  /* Enable the TIM3 gloabal Interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn;
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 80024d0:	2401      	movs	r4, #1

  /* TIM3 clock enable */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);

  /* Enable the TIM3 gloabal Interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn;
 80024d2:	231d      	movs	r3, #29
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80024d4:	2500      	movs	r5, #0
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure);
 80024d6:	a801      	add	r0, sp, #4

  /* TIM3 clock enable */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);

  /* Enable the TIM3 gloabal Interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn;
 80024d8:	f88d 3004 	strb.w	r3, [sp, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80024dc:	f88d 5005 	strb.w	r5, [sp, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 80024e0:	f88d 4006 	strb.w	r4, [sp, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80024e4:	f88d 4007 	strb.w	r4, [sp, #7]
  NVIC_Init(&NVIC_InitStructure);
 80024e8:	f000 fa68 	bl	80029bc <NVIC_Init>

  /* Initialize Leds mounted on STM324xG-EVAL board */
  STM_EVAL_LEDInit(LED1);
 80024ec:	4628      	mov	r0, r5
 80024ee:	f000 faa5 	bl	8002a3c <STM_EVAL_LEDInit>
  STM_EVAL_LEDInit(LED2);
 80024f2:	4620      	mov	r0, r4
 80024f4:	f000 faa2 	bl	8002a3c <STM_EVAL_LEDInit>
  STM_EVAL_LEDInit(LED3);
 80024f8:	2002      	movs	r0, #2
 80024fa:	f000 fa9f 	bl	8002a3c <STM_EVAL_LEDInit>
  STM_EVAL_LEDInit(LED4);
 80024fe:	2003      	movs	r0, #3
 8002500:	f000 fa9c 	bl	8002a3c <STM_EVAL_LEDInit>


  /* Turn on LED1, LED2, LED3 and LED4 */
	STM_EVAL_LEDOn(LED1);
 8002504:	4628      	mov	r0, r5
 8002506:	f000 fac3 	bl	8002a90 <STM_EVAL_LEDOn>
	STM_EVAL_LEDOn(LED2);
 800250a:	4620      	mov	r0, r4
 800250c:	f000 fac0 	bl	8002a90 <STM_EVAL_LEDOn>
	STM_EVAL_LEDOn(LED3);
 8002510:	2002      	movs	r0, #2
 8002512:	f000 fabd 	bl	8002a90 <STM_EVAL_LEDOn>
	STM_EVAL_LEDOn(LED4);
 8002516:	2003      	movs	r0, #3
 8002518:	f000 faba 	bl	8002a90 <STM_EVAL_LEDOn>

	ANCA_INIT_All();
 800251c:	f000 faf0 	bl	8002b00 <ANCA_INIT_All>
	P24_init();
 8002520:	f7fd fe90 	bl	8000244 <P24_init>
}
 8002524:	b003      	add	sp, #12
 8002526:	bd30      	pop	{r4, r5, pc}

08002528 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8002528:	b570      	push	{r4, r5, r6, lr}
       To reconfigure the default setting of SystemInit() function, refer to
       system_stm32f4xx.c file
     */

  /* TIM Configuration */
  TIM_Config();
 800252a:	f7ff ffcb 	bl	80024c4 <TIM_Config>
     based on this variable will be incorrect.    
  ----------------------------------------------------------------------- */   


  /* Compute the prescaler value */
  PrescalerValue = (uint16_t) ((SystemCoreClock / 2) / 6000000) - 1;
 800252e:	4a38      	ldr	r2, [pc, #224]	; (8002610 <main+0xe8>)

  /* Time base configuration */
  TIM_TimeBaseStructure.TIM_Period = 65535;
 8002530:	4b38      	ldr	r3, [pc, #224]	; (8002614 <main+0xec>)
     based on this variable will be incorrect.    
  ----------------------------------------------------------------------- */   


  /* Compute the prescaler value */
  PrescalerValue = (uint16_t) ((SystemCoreClock / 2) / 6000000) - 1;
 8002532:	6811      	ldr	r1, [r2, #0]
 8002534:	4e38      	ldr	r6, [pc, #224]	; (8002618 <main+0xf0>)

  /* Prescaler configuration */
  TIM_PrescalerConfig(TIM3, PrescalerValue, TIM_PSCReloadMode_Immediate);

  /* Output Compare Timing Mode configuration: Channel1 */
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_Timing;
 8002536:	4c39      	ldr	r4, [pc, #228]	; (800261c <main+0xf4>)
     based on this variable will be incorrect.    
  ----------------------------------------------------------------------- */   


  /* Compute the prescaler value */
  PrescalerValue = (uint16_t) ((SystemCoreClock / 2) / 6000000) - 1;
 8002538:	f649 7281 	movw	r2, #40833	; 0x9f81
 800253c:	f2c1 625e 	movt	r2, #5726	; 0x165e
 8002540:	fba2 0201 	umull	r0, r2, r2, r1
 8002544:	0d12      	lsrs	r2, r2, #20
 8002546:	3a01      	subs	r2, #1
  TIM_TimeBaseStructure.TIM_Period = 65535;
  TIM_TimeBaseStructure.TIM_Prescaler = 0;
  TIM_TimeBaseStructure.TIM_ClockDivision = 0;
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;

  TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
 8002548:	f44f 6080 	mov.w	r0, #1024	; 0x400
  /* Compute the prescaler value */
  PrescalerValue = (uint16_t) ((SystemCoreClock / 2) / 6000000) - 1;

  /* Time base configuration */
  TIM_TimeBaseStructure.TIM_Period = 65535;
  TIM_TimeBaseStructure.TIM_Prescaler = 0;
 800254c:	2500      	movs	r5, #0
  TIM_TimeBaseStructure.TIM_ClockDivision = 0;
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;

  TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
 800254e:	4619      	mov	r1, r3
     based on this variable will be incorrect.    
  ----------------------------------------------------------------------- */   


  /* Compute the prescaler value */
  PrescalerValue = (uint16_t) ((SystemCoreClock / 2) / 6000000) - 1;
 8002550:	8032      	strh	r2, [r6, #0]
  TIM_TimeBaseStructure.TIM_Period = 65535;
  TIM_TimeBaseStructure.TIM_Prescaler = 0;
  TIM_TimeBaseStructure.TIM_ClockDivision = 0;
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;

  TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
 8002552:	f2c4 0000 	movt	r0, #16384	; 0x4000

  /* Compute the prescaler value */
  PrescalerValue = (uint16_t) ((SystemCoreClock / 2) / 6000000) - 1;

  /* Time base configuration */
  TIM_TimeBaseStructure.TIM_Period = 65535;
 8002556:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800255a:	605a      	str	r2, [r3, #4]
  TIM_TimeBaseStructure.TIM_Prescaler = 0;
 800255c:	801d      	strh	r5, [r3, #0]
  TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 800255e:	811d      	strh	r5, [r3, #8]
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8002560:	805d      	strh	r5, [r3, #2]

  TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
 8002562:	f000 f863 	bl	800262c <TIM_TimeBaseInit>

  /* Prescaler configuration */
  TIM_PrescalerConfig(TIM3, PrescalerValue, TIM_PSCReloadMode_Immediate);
 8002566:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800256a:	2201      	movs	r2, #1
 800256c:	8831      	ldrh	r1, [r6, #0]
 800256e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002572:	f000 f8a7 	bl	80026c4 <TIM_PrescalerConfig>

  /* Output Compare Timing Mode configuration: Channel1 */
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_Timing;
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
  TIM_OCInitStructure.TIM_Pulse = CCR1_Val;
 8002576:	4b2a      	ldr	r3, [pc, #168]	; (8002620 <main+0xf8>)

  /* Prescaler configuration */
  TIM_PrescalerConfig(TIM3, PrescalerValue, TIM_PSCReloadMode_Immediate);

  /* Output Compare Timing Mode configuration: Channel1 */
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_Timing;
 8002578:	8025      	strh	r5, [r4, #0]
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
  TIM_OCInitStructure.TIM_Pulse = CCR1_Val;
 800257a:	881b      	ldrh	r3, [r3, #0]
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 800257c:	81a5      	strh	r5, [r4, #12]

  TIM_OC1Init(TIM3, &TIM_OCInitStructure);
 800257e:	f44f 6080 	mov.w	r0, #1024	; 0x400
  /* Prescaler configuration */
  TIM_PrescalerConfig(TIM3, PrescalerValue, TIM_PSCReloadMode_Immediate);

  /* Output Compare Timing Mode configuration: Channel1 */
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_Timing;
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8002582:	2601      	movs	r6, #1
  TIM_OCInitStructure.TIM_Pulse = CCR1_Val;
 8002584:	b29b      	uxth	r3, r3
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;

  TIM_OC1Init(TIM3, &TIM_OCInitStructure);
 8002586:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800258a:	4621      	mov	r1, r4
  TIM_PrescalerConfig(TIM3, PrescalerValue, TIM_PSCReloadMode_Immediate);

  /* Output Compare Timing Mode configuration: Channel1 */
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_Timing;
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
  TIM_OCInitStructure.TIM_Pulse = CCR1_Val;
 800258c:	60a3      	str	r3, [r4, #8]
  /* Prescaler configuration */
  TIM_PrescalerConfig(TIM3, PrescalerValue, TIM_PSCReloadMode_Immediate);

  /* Output Compare Timing Mode configuration: Channel1 */
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_Timing;
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 800258e:	8066      	strh	r6, [r4, #2]
  TIM_OCInitStructure.TIM_Pulse = CCR1_Val;
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;

  TIM_OC1Init(TIM3, &TIM_OCInitStructure);
 8002590:	f000 f8aa 	bl	80026e8 <TIM_OC1Init>

  TIM_OC1PreloadConfig(TIM3, TIM_OCPreload_Disable);
 8002594:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002598:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800259c:	4629      	mov	r1, r5
 800259e:	f000 f971 	bl	8002884 <TIM_OC1PreloadConfig>

  //TIM_OC2PreloadConfig(TIM3, TIM_OCPreload_Disable);

  /* Output Compare Timing Mode configuration: Channel3 */
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
  TIM_OCInitStructure.TIM_Pulse = CCR3_Val;
 80025a2:	4b20      	ldr	r3, [pc, #128]	; (8002624 <main+0xfc>)
  //TIM_OC2Init(TIM3, &TIM_OCInitStructure);

  //TIM_OC2PreloadConfig(TIM3, TIM_OCPreload_Disable);

  /* Output Compare Timing Mode configuration: Channel3 */
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 80025a4:	8066      	strh	r6, [r4, #2]
  TIM_OCInitStructure.TIM_Pulse = CCR3_Val;
 80025a6:	881b      	ldrh	r3, [r3, #0]

  TIM_OC3Init(TIM3, &TIM_OCInitStructure);
 80025a8:	f44f 6080 	mov.w	r0, #1024	; 0x400

  //TIM_OC2PreloadConfig(TIM3, TIM_OCPreload_Disable);

  /* Output Compare Timing Mode configuration: Channel3 */
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
  TIM_OCInitStructure.TIM_Pulse = CCR3_Val;
 80025ac:	b29b      	uxth	r3, r3

  TIM_OC3Init(TIM3, &TIM_OCInitStructure);
 80025ae:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80025b2:	4621      	mov	r1, r4

  //TIM_OC2PreloadConfig(TIM3, TIM_OCPreload_Disable);

  /* Output Compare Timing Mode configuration: Channel3 */
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
  TIM_OCInitStructure.TIM_Pulse = CCR3_Val;
 80025b4:	60a3      	str	r3, [r4, #8]

  TIM_OC3Init(TIM3, &TIM_OCInitStructure);
 80025b6:	f000 f8df 	bl	8002778 <TIM_OC3Init>

  TIM_OC3PreloadConfig(TIM3, TIM_OCPreload_Disable);
 80025ba:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80025be:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80025c2:	4629      	mov	r1, r5
 80025c4:	f000 f966 	bl	8002894 <TIM_OC3PreloadConfig>

  /* Output Compare Timing Mode configuration: Channel4 */
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
  TIM_OCInitStructure.TIM_Pulse = CCR4_Val;
 80025c8:	4b17      	ldr	r3, [pc, #92]	; (8002628 <main+0x100>)
  TIM_OC3Init(TIM3, &TIM_OCInitStructure);

  TIM_OC3PreloadConfig(TIM3, TIM_OCPreload_Disable);

  /* Output Compare Timing Mode configuration: Channel4 */
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 80025ca:	8066      	strh	r6, [r4, #2]
  TIM_OCInitStructure.TIM_Pulse = CCR4_Val;
 80025cc:	881b      	ldrh	r3, [r3, #0]

  TIM_OC4Init(TIM3, &TIM_OCInitStructure);
 80025ce:	f44f 6080 	mov.w	r0, #1024	; 0x400

  TIM_OC3PreloadConfig(TIM3, TIM_OCPreload_Disable);

  /* Output Compare Timing Mode configuration: Channel4 */
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
  TIM_OCInitStructure.TIM_Pulse = CCR4_Val;
 80025d2:	b29b      	uxth	r3, r3

  TIM_OC4Init(TIM3, &TIM_OCInitStructure);
 80025d4:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80025d8:	4621      	mov	r1, r4

  TIM_OC3PreloadConfig(TIM3, TIM_OCPreload_Disable);

  /* Output Compare Timing Mode configuration: Channel4 */
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
  TIM_OCInitStructure.TIM_Pulse = CCR4_Val;
 80025da:	60a3      	str	r3, [r4, #8]

  TIM_OC4Init(TIM3, &TIM_OCInitStructure);
 80025dc:	f000 f918 	bl	8002810 <TIM_OC4Init>

  TIM_OC4PreloadConfig(TIM3, TIM_OCPreload_Disable);
 80025e0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80025e4:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80025e8:	4629      	mov	r1, r5
 80025ea:	f000 f95b 	bl	80028a4 <TIM_OC4PreloadConfig>
   
  /* TIM Interrupts enable */
  //TIM_ITConfig(TIM3, TIM_IT_CC1 | TIM_IT_CC2 | TIM_IT_CC3 | TIM_IT_CC4, ENABLE);
	TIM_ITConfig(TIM3, TIM_IT_CC4, ENABLE);
 80025ee:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80025f2:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80025f6:	2110      	movs	r1, #16
 80025f8:	4632      	mov	r2, r6
 80025fa:	f000 f95d 	bl	80028b8 <TIM_ITConfig>
	
  /* TIM3 enable counter */
  TIM_Cmd(TIM3, ENABLE);
 80025fe:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002602:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8002606:	4631      	mov	r1, r6
 8002608:	f000 f860 	bl	80026cc <TIM_Cmd>
 800260c:	e7fe      	b.n	800260c <main+0xe4>
 800260e:	bf00      	nop
 8002610:	20000008 	.word	0x20000008
 8002614:	200002f8 	.word	0x200002f8
 8002618:	200002a0 	.word	0x200002a0
 800261c:	20000304 	.word	0x20000304
 8002620:	20000000 	.word	0x20000000
 8002624:	20000002 	.word	0x20000002
 8002628:	20000004 	.word	0x20000004

0800262c <TIM_TimeBaseInit>:
  ////assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  //assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)||
 800262c:	2200      	movs	r2, #0
//   * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
//   *         that contains the configuration information for the specified TIM peripheral.
//   * @retval None
//   */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 800262e:	b470      	push	{r4, r5, r6}
  ////assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  //assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8002630:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8002634:	f2c4 0201 	movt	r2, #16385	; 0x4001
  /* Check the parameters */
  //assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  ////assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  //assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8002638:	8803      	ldrh	r3, [r0, #0]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 800263a:	f2c4 0401 	movt	r4, #16385	; 0x4001
 800263e:	4290      	cmp	r0, r2
 8002640:	bf18      	it	ne
 8002642:	42a0      	cmpne	r0, r4
  /* Check the parameters */
  //assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  ////assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  //assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8002644:	b29b      	uxth	r3, r3

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8002646:	bf14      	ite	ne
 8002648:	2200      	movne	r2, #0
 800264a:	2201      	moveq	r2, #1
 800264c:	d008      	beq.n	8002660 <TIM_TimeBaseInit+0x34>
     (TIMx == TIM2) || (TIMx == TIM3)||
 800264e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8002652:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8002656:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800265a:	bf18      	it	ne
 800265c:	42a0      	cmpne	r0, r4
 800265e:	d123      	bne.n	80026a8 <TIM_TimeBaseInit+0x7c>
     (TIMx == TIM4) || (TIMx == TIM5)) 
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8002660:	f64f 758f 	movw	r5, #65423	; 0xff8f
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8002664:	884c      	ldrh	r4, [r1, #2]
  if((TIMx == TIM1) || (TIMx == TIM8)||
     (TIMx == TIM2) || (TIMx == TIM3)||
     (TIMx == TIM4) || (TIMx == TIM5)) 
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8002666:	401d      	ands	r5, r3
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8002668:	ea45 0304 	orr.w	r3, r5, r4
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 800266c:	f44f 56a0 	mov.w	r6, #5120	; 0x1400
 8002670:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 8002674:	f2c4 0500 	movt	r5, #16384	; 0x4000
 8002678:	f2c4 0600 	movt	r6, #16384	; 0x4000
 800267c:	42b0      	cmp	r0, r6
 800267e:	bf18      	it	ne
 8002680:	42a8      	cmpne	r0, r5
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8002682:	bf1f      	itttt	ne
 8002684:	890d      	ldrhne	r5, [r1, #8]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8002686:	f64f 44ff 	movwne	r4, #64767	; 0xfcff
 800268a:	401c      	andne	r4, r3
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800268c:	ea44 0305 	orrne.w	r3, r4, r5
  }

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8002690:	684d      	ldr	r5, [r1, #4]
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8002692:	880c      	ldrh	r4, [r1, #0]
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 8002694:	8003      	strh	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8002696:	62c5      	str	r5, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8002698:	8504      	strh	r4, [r0, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 800269a:	b10a      	cbz	r2, 80026a0 <TIM_TimeBaseInit+0x74>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 800269c:	7a8b      	ldrb	r3, [r1, #10]
 800269e:	8603      	strh	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 80026a0:	2301      	movs	r3, #1
 80026a2:	8283      	strh	r3, [r0, #20]
}
 80026a4:	bc70      	pop	{r4, r5, r6}
 80026a6:	4770      	bx	lr

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)||
     (TIMx == TIM2) || (TIMx == TIM3)||
     (TIMx == TIM4) || (TIMx == TIM5)) 
 80026a8:	f44f 6540 	mov.w	r5, #3072	; 0xc00
 80026ac:	f44f 6400 	mov.w	r4, #2048	; 0x800
 80026b0:	f2c4 0500 	movt	r5, #16384	; 0x4000
 80026b4:	f2c4 0400 	movt	r4, #16384	; 0x4000
 80026b8:	42a0      	cmp	r0, r4
 80026ba:	bf18      	it	ne
 80026bc:	42a8      	cmpne	r0, r5
 80026be:	d1d5      	bne.n	800266c <TIM_TimeBaseInit+0x40>
 80026c0:	e7ce      	b.n	8002660 <TIM_TimeBaseInit+0x34>
 80026c2:	bf00      	nop

080026c4 <TIM_PrescalerConfig>:
{
  /* Check the parameters */
  //assert_param(IS_TIM_ALL_PERIPH(TIMx));
  //assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 80026c4:	8501      	strh	r1, [r0, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 80026c6:	8282      	strh	r2, [r0, #20]
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop

080026cc <TIM_Cmd>:
  //assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80026cc:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  //assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  //assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80026ce:	b929      	cbnz	r1, 80026dc <TIM_Cmd+0x10>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 80026d0:	f023 0301 	bic.w	r3, r3, #1
 80026d4:	041b      	lsls	r3, r3, #16
 80026d6:	0c1b      	lsrs	r3, r3, #16
 80026d8:	8003      	strh	r3, [r0, #0]
 80026da:	4770      	bx	lr
  //assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80026dc:	b29b      	uxth	r3, r3
 80026de:	f043 0301 	orr.w	r3, r3, #1
 80026e2:	8003      	strh	r3, [r0, #0]
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop

080026e8 <TIM_OC1Init>:
//   * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
//   *         the configuration information for the specified TIM peripheral.
//   * @retval None
//   */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80026e8:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
  //assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  //assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  //assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 80026ec:	8c04      	ldrh	r4, [r0, #32]
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 80026ee:	898d      	ldrh	r5, [r1, #12]
 80026f0:	884f      	ldrh	r7, [r1, #2]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80026f2:	f8b1 c000 	ldrh.w	ip, [r1]
  //assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  //assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  //assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 80026f6:	f024 0401 	bic.w	r4, r4, #1
 80026fa:	0424      	lsls	r4, r4, #16
 80026fc:	0c24      	lsrs	r4, r4, #16
 80026fe:	8404      	strh	r4, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002700:	8c03      	ldrh	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002702:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002704:	8b02      	ldrh	r2, [r0, #24]
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8002706:	432f      	orrs	r7, r5
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 8002708:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800270c:	2500      	movs	r5, #0
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 800270e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002712:	f44f 6680 	mov.w	r6, #1024	; 0x400
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 8002716:	0412      	lsls	r2, r2, #16
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 8002718:	041b      	lsls	r3, r3, #16
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800271a:	f2c4 0601 	movt	r6, #16385	; 0x4001
 800271e:	f2c4 0501 	movt	r5, #16385	; 0x4001
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 8002722:	0c12      	lsrs	r2, r2, #16
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 8002724:	0c1b      	lsrs	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8002726:	b2bf      	uxth	r7, r7
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002728:	42a8      	cmp	r0, r5
 800272a:	bf18      	it	ne
 800272c:	42b0      	cmpne	r0, r6
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800272e:	b2a4      	uxth	r4, r4
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8002730:	ea42 020c 	orr.w	r2, r2, ip
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8002734:	ea47 0303 	orr.w	r3, r7, r3
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002738:	d116      	bne.n	8002768 <TIM_OC1Init+0x80>
    //assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    //assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    //assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 800273a:	f64f 75f7 	movw	r5, #65527	; 0xfff7
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 800273e:	f8b1 c00e 	ldrh.w	ip, [r1, #14]
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8002742:	f8b1 8012 	ldrh.w	r8, [r1, #18]
 8002746:	8a0f      	ldrh	r7, [r1, #16]
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8002748:	888e      	ldrh	r6, [r1, #4]
    //assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    //assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    //assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 800274a:	401d      	ands	r5, r3
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 800274c:	ea45 0c0c 	orr.w	ip, r5, ip
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 8002750:	f64f 73fb 	movw	r3, #65531	; 0xfffb
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 8002754:	f64f 45ff 	movw	r5, #64767	; 0xfcff
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8002758:	ea48 0707 	orr.w	r7, r8, r7
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 800275c:	4025      	ands	r5, r4
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 800275e:	ea0c 0303 	and.w	r3, ip, r3
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8002762:	b2bc      	uxth	r4, r7
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8002764:	4333      	orrs	r3, r6
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8002766:	432c      	orrs	r4, r5
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 8002768:	6889      	ldr	r1, [r1, #8]
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800276a:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800276c:	8302      	strh	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 800276e:	6341      	str	r1, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002770:	8403      	strh	r3, [r0, #32]
}
 8002772:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8002776:	4770      	bx	lr

08002778 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8002778:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
  //assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  //assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  //assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 800277c:	8c04      	ldrh	r4, [r0, #32]
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 800277e:	898d      	ldrh	r5, [r1, #12]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8002780:	f8b1 c002 	ldrh.w	ip, [r1, #2]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8002784:	880f      	ldrh	r7, [r1, #0]
  //assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  //assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  //assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8002786:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 800278a:	0424      	lsls	r4, r4, #16
 800278c:	0c24      	lsrs	r4, r4, #16
 800278e:	8404      	strh	r4, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002790:	8c02      	ldrh	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002792:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002794:	8b83      	ldrh	r3, [r0, #28]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8002796:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800279a:	0412      	lsls	r2, r2, #16
 800279c:	0c12      	lsrs	r2, r2, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 800279e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 80027a2:	f023 0373 	bic.w	r3, r3, #115	; 0x73
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80027a6:	2500      	movs	r5, #0
 80027a8:	f44f 6680 	mov.w	r6, #1024	; 0x400
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 80027ac:	041b      	lsls	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80027ae:	f2c4 0601 	movt	r6, #16385	; 0x4001
 80027b2:	f2c4 0501 	movt	r5, #16385	; 0x4001
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 80027b6:	0c1b      	lsrs	r3, r3, #16
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 80027b8:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80027bc:	42a8      	cmp	r0, r5
 80027be:	bf18      	it	ne
 80027c0:	42b0      	cmpne	r0, r6
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027c2:	b2a4      	uxth	r4, r4
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80027c4:	ea43 0307 	orr.w	r3, r3, r7
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 80027c8:	b292      	uxth	r2, r2
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80027ca:	d119      	bne.n	8002800 <TIM_OC3Init+0x88>
    //assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    //assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    //assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 80027cc:	f24f 76ff 	movw	r6, #63487	; 0xf7ff
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 80027d0:	f8b1 900e 	ldrh.w	r9, [r1, #14]
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 80027d4:	f8b1 8010 	ldrh.w	r8, [r1, #16]
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 80027d8:	f8b1 c004 	ldrh.w	ip, [r1, #4]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 80027dc:	8a4f      	ldrh	r7, [r1, #18]
    //assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    //assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    //assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 80027de:	4016      	ands	r6, r2
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 80027e0:	f64c 75ff 	movw	r5, #53247	; 0xcfff
 80027e4:	4025      	ands	r5, r4
    //assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 80027e6:	ea46 2609 	orr.w	r6, r6, r9, lsl #8
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 80027ea:	f64f 32ff 	movw	r2, #64511	; 0xfbff
 80027ee:	4032      	ands	r2, r6
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 80027f0:	ea45 1408 	orr.w	r4, r5, r8, lsl #4
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 80027f4:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 80027f8:	ea44 1407 	orr.w	r4, r4, r7, lsl #4
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 80027fc:	b292      	uxth	r2, r2
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 80027fe:	b2a4      	uxth	r4, r4
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8002800:	6889      	ldr	r1, [r1, #8]
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002802:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002804:	8383      	strh	r3, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8002806:	63c1      	str	r1, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002808:	8402      	strh	r2, [r0, #32]
}
 800280a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800280e:	4770      	bx	lr

08002810 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8002810:	b4f0      	push	{r4, r5, r6, r7}
  //assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  //assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  //assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8002812:	8c04      	ldrh	r4, [r0, #32]
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8002814:	898d      	ldrh	r5, [r1, #12]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8002816:	f8b1 c000 	ldrh.w	ip, [r1]
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 800281a:	884f      	ldrh	r7, [r1, #2]
  //assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  //assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  //assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 800281c:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8002820:	0424      	lsls	r4, r4, #16
 8002822:	0c24      	lsrs	r4, r4, #16
 8002824:	8404      	strh	r4, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002826:	8c02      	ldrh	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002828:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800282a:	8b83      	ldrh	r3, [r0, #28]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 800282c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002830:	0412      	lsls	r2, r2, #16
 8002832:	0c12      	lsrs	r2, r2, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8002834:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 8002838:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 800283c:	2500      	movs	r5, #0
 800283e:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8002842:	f2c4 0501 	movt	r5, #16385	; 0x4001
 8002846:	f2c4 0601 	movt	r6, #16385	; 0x4001
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 800284a:	041b      	lsls	r3, r3, #16
 800284c:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 800284e:	42a8      	cmp	r0, r5
 8002850:	bf18      	it	ne
 8002852:	42b0      	cmpne	r0, r6
  {
    //assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8002854:	bf08      	it	eq
 8002856:	8a0e      	ldrheq	r6, [r1, #16]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8002858:	6889      	ldr	r1, [r1, #8]
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800285a:	b2a4      	uxth	r4, r4
  
  if((TIMx == TIM1) || (TIMx == TIM8))
  {
    //assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 800285c:	bf02      	ittt	eq
 800285e:	f64b 75ff 	movweq	r5, #49151	; 0xbfff
 8002862:	4025      	andeq	r5, r4
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8002864:	ea45 1486 	orreq.w	r4, r5, r6, lsl #6
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8002868:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 800286c:	ea42 3207 	orr.w	r2, r2, r7, lsl #12
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8002870:	b29b      	uxth	r3, r3
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8002872:	b292      	uxth	r2, r2
  {
    //assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8002874:	bf08      	it	eq
 8002876:	b2a4      	uxtheq	r4, r4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002878:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 800287a:	8383      	strh	r3, [r0, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 800287c:	6401      	str	r1, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800287e:	8402      	strh	r2, [r0, #32]
}
 8002880:	bcf0      	pop	{r4, r5, r6, r7}
 8002882:	4770      	bx	lr

08002884 <TIM_OC1PreloadConfig>:

  /* Check the parameters */
  //assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  //assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8002884:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 8002886:	f023 0308 	bic.w	r3, r3, #8
 800288a:	041b      	lsls	r3, r3, #16
 800288c:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 800288e:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8002890:	8301      	strh	r1, [r0, #24]
 8002892:	4770      	bx	lr

08002894 <TIM_OC3PreloadConfig>:

  /* Check the parameters */
  //assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  //assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8002894:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 8002896:	f023 0308 	bic.w	r3, r3, #8
 800289a:	041b      	lsls	r3, r3, #16
 800289c:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 800289e:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80028a0:	8381      	strh	r1, [r0, #28]
 80028a2:	4770      	bx	lr

080028a4 <TIM_OC4PreloadConfig>:

  /* Check the parameters */
  //assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  //assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 80028a4:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 80028a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80028aa:	041b      	lsls	r3, r3, #16
 80028ac:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 80028ae:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80028b2:	b28b      	uxth	r3, r1

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80028b4:	8383      	strh	r3, [r0, #28]
 80028b6:	4770      	bx	lr

080028b8 <TIM_ITConfig>:
  //assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 80028b8:	8983      	ldrh	r3, [r0, #12]
 80028ba:	b29b      	uxth	r3, r3
  /* Check the parameters */
  //assert_param(IS_TIM_ALL_PERIPH(TIMx));
  //assert_param(IS_TIM_IT(TIM_IT));
  //assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80028bc:	b91a      	cbnz	r2, 80028c6 <TIM_ITConfig+0xe>
    TIMx->DIER |= TIM_IT;
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 80028be:	ea23 0101 	bic.w	r1, r3, r1
 80028c2:	8181      	strh	r1, [r0, #12]
 80028c4:	4770      	bx	lr
  //assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 80028c6:	4319      	orrs	r1, r3
 80028c8:	8181      	strh	r1, [r0, #12]
 80028ca:	4770      	bx	lr

080028cc <RCC_AHB1PeriphClockCmd>:
  //assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  //assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80028cc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80028d0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80028d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
{
  /* Check the parameters */
  //assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  //assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80028d6:	b919      	cbnz	r1, 80028e0 <RCC_AHB1PeriphClockCmd+0x14>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80028d8:	ea22 0000 	bic.w	r0, r2, r0
 80028dc:	6318      	str	r0, [r3, #48]	; 0x30
 80028de:	4770      	bx	lr
  //assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  //assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80028e0:	4310      	orrs	r0, r2
 80028e2:	6318      	str	r0, [r3, #48]	; 0x30
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop

080028e8 <RCC_APB1PeriphClockCmd>:
  //assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  //assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80028e8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80028ec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80028f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  /* Check the parameters */
  //assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  //assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80028f2:	b919      	cbnz	r1, 80028fc <RCC_APB1PeriphClockCmd+0x14>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80028f4:	ea22 0000 	bic.w	r0, r2, r0
 80028f8:	6418      	str	r0, [r3, #64]	; 0x40
 80028fa:	4770      	bx	lr
  //assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  //assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80028fc:	4310      	orrs	r0, r2
 80028fe:	6418      	str	r0, [r3, #64]	; 0x40
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop

08002904 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8002904:	2200      	movs	r2, #0
 8002906:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
  //assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  //assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800290a:	4613      	mov	r3, r2
 800290c:	680e      	ldr	r6, [r1, #0]
  {
    pos = ((uint32_t)0x01) << pinpos;
 800290e:	2701      	movs	r7, #1
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8002910:	f04f 0803 	mov.w	r8, #3
 8002914:	e003      	b.n	800291e <GPIO_Init+0x1a>
  //assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  //assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8002916:	3301      	adds	r3, #1
 8002918:	3202      	adds	r2, #2
 800291a:	2b10      	cmp	r3, #16
 800291c:	d02b      	beq.n	8002976 <GPIO_Init+0x72>
  {
    pos = ((uint32_t)0x01) << pinpos;
 800291e:	fa07 f403 	lsl.w	r4, r7, r3
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8002922:	ea04 0506 	and.w	r5, r4, r6

    if (currentpin == pos)
 8002926:	42a5      	cmp	r5, r4
 8002928:	d1f5      	bne.n	8002916 <GPIO_Init+0x12>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800292a:	f8d0 9000 	ldr.w	r9, [r0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800292e:	f891 c004 	ldrb.w	ip, [r1, #4]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8002932:	fa08 f402 	lsl.w	r4, r8, r2
 8002936:	43e4      	mvns	r4, r4
 8002938:	ea04 0909 	and.w	r9, r4, r9
 800293c:	f8c0 9000 	str.w	r9, [r0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8002940:	f8d0 9000 	ldr.w	r9, [r0]
 8002944:	fa0c fa02 	lsl.w	sl, ip, r2

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8002948:	f10c 3cff 	add.w	ip, ip, #4294967295
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800294c:	ea4a 0909 	orr.w	r9, sl, r9

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8002950:	f1bc 0f01 	cmp.w	ip, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8002954:	f8c0 9000 	str.w	r9, [r0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8002958:	d910      	bls.n	800297c <GPIO_Init+0x78>
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800295a:	68c5      	ldr	r5, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800295c:	f891 c007 	ldrb.w	ip, [r1, #7]
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8002960:	402c      	ands	r4, r5
 8002962:	60c4      	str	r4, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8002964:	68c5      	ldr	r5, [r0, #12]
 8002966:	fa0c f402 	lsl.w	r4, ip, r2
  //assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  //assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800296a:	3301      	adds	r3, #1
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800296c:	432c      	orrs	r4, r5
 800296e:	3202      	adds	r2, #2
  //assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  //assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8002970:	2b10      	cmp	r3, #16
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8002972:	60c4      	str	r4, [r0, #12]
  //assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  //assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8002974:	d1d3      	bne.n	800291e <GPIO_Init+0x1a>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8002976:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 800297a:	4770      	bx	lr
      {
        /* Check Speed mode parameters */
        //assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800297c:	f8d0 a008 	ldr.w	sl, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8002980:	f891 9005 	ldrb.w	r9, [r1, #5]
        /* Check Output mode parameters */
        //assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8002984:	f891 c006 	ldrb.w	ip, [r1, #6]
      {
        /* Check Speed mode parameters */
        //assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8002988:	ea04 0a0a 	and.w	sl, r4, sl
 800298c:	f8c0 a008 	str.w	sl, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8002990:	f8d0 a008 	ldr.w	sl, [r0, #8]
 8002994:	fa09 f902 	lsl.w	r9, r9, r2
 8002998:	ea49 090a 	orr.w	r9, r9, sl
 800299c:	f8c0 9008 	str.w	r9, [r0, #8]

        /* Check Output mode parameters */
        //assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80029a0:	f8d0 9004 	ldr.w	r9, [r0, #4]
 80029a4:	ea29 0505 	bic.w	r5, r9, r5
 80029a8:	6045      	str	r5, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80029aa:	6845      	ldr	r5, [r0, #4]
 80029ac:	fa0c fc03 	lsl.w	ip, ip, r3
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
}
 80029b0:	fa1f fc8c 	uxth.w	ip, ip
        /* Check Output mode parameters */
        //assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80029b4:	ea4c 0505 	orr.w	r5, ip, r5
 80029b8:	6045      	str	r5, [r0, #4]
 80029ba:	e7ce      	b.n	800295a <GPIO_Init+0x56>

080029bc <NVIC_Init>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80029bc:	78c3      	ldrb	r3, [r0, #3]
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80029be:	b430      	push	{r4, r5}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80029c0:	b97b      	cbnz	r3, 80029e2 <NVIC_Init+0x26>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80029c2:	7802      	ldrb	r2, [r0, #0]
 80029c4:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80029c8:	0951      	lsrs	r1, r2, #5
 80029ca:	f2ce 0300 	movt	r3, #57344	; 0xe000
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80029ce:	f002 021f 	and.w	r2, r2, #31
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80029d2:	3120      	adds	r1, #32
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80029d4:	2001      	movs	r0, #1
 80029d6:	fa00 f202 	lsl.w	r2, r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80029da:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80029de:	bc30      	pop	{r4, r5}
 80029e0:	4770      	bx	lr
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80029e2:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80029e6:	f2ce 0300 	movt	r3, #57344	; 0xe000
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80029ea:	7845      	ldrb	r5, [r0, #1]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80029ec:	68da      	ldr	r2, [r3, #12]
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80029ee:	7884      	ldrb	r4, [r0, #2]
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80029f0:	7803      	ldrb	r3, [r0, #0]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80029f2:	43d2      	mvns	r2, r2
 80029f4:	f3c2 2202 	ubfx	r2, r2, #8, #3
    tmppre = (0x4 - tmppriority);
 80029f8:	f1c2 0104 	rsb	r1, r2, #4
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80029fc:	b2c9      	uxtb	r1, r1
 80029fe:	fa05 f101 	lsl.w	r1, r5, r1
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
 8002a02:	250f      	movs	r5, #15
 8002a04:	fa45 f202 	asr.w	r2, r5, r2

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8002a08:	b2c9      	uxtb	r1, r1
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8002a0a:	4022      	ands	r2, r4
 8002a0c:	430a      	orrs	r2, r1
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8002a0e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8002a12:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
 8002a16:	0112      	lsls	r2, r2, #4
 8002a18:	b2d2      	uxtb	r2, r2
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8002a1a:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8002a1e:	7802      	ldrb	r2, [r0, #0]
    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8002a20:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8002a24:	0951      	lsrs	r1, r2, #5
    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8002a26:	f2ce 0300 	movt	r3, #57344	; 0xe000
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8002a2a:	f002 021f 	and.w	r2, r2, #31
 8002a2e:	2001      	movs	r0, #1
 8002a30:	fa00 f202 	lsl.w	r2, r0, r2
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8002a34:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8002a38:	e7d1      	b.n	80029de <NVIC_Init+0x22>
 8002a3a:	bf00      	nop

08002a3c <STM_EVAL_LEDInit>:
  *     @arg LED3
  *     @arg LED4
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 8002a3c:	b510      	push	{r4, lr}
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 8002a3e:	f642 33f0 	movw	r3, #11248	; 0x2bf0
 8002a42:	f6c0 0300 	movt	r3, #2048	; 0x800
  *     @arg LED3
  *     @arg LED4
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 8002a46:	b082      	sub	sp, #8
 8002a48:	4604      	mov	r4, r0
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 8002a4a:	2101      	movs	r1, #1
 8002a4c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8002a50:	f7ff ff3c 	bl	80028cc <RCC_AHB1PeriphClockCmd>


  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 8002a54:	f642 4200 	movw	r2, #11264	; 0x2c00
 8002a58:	f6c0 0200 	movt	r2, #2048	; 0x800
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 8002a5c:	f240 030c 	movw	r3, #12
 8002a60:	f2c2 0300 	movt	r3, #8192	; 0x2000
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);


  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 8002a64:	f832 2014 	ldrh.w	r2, [r2, r4, lsl #1]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 8002a68:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);


  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 8002a6c:	9200      	str	r2, [sp, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	f88d 3004 	strb.w	r3, [sp, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002a74:	2200      	movs	r2, #0
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8002a76:	f88d 3007 	strb.w	r3, [sp, #7]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 8002a7a:	4669      	mov	r1, sp
  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002a7c:	2302      	movs	r3, #2


  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002a7e:	f88d 2006 	strb.w	r2, [sp, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002a82:	f88d 3005 	strb.w	r3, [sp, #5]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 8002a86:	f7ff ff3d 	bl	8002904 <GPIO_Init>
}
 8002a8a:	b002      	add	sp, #8
 8002a8c:	bd10      	pop	{r4, pc}
 8002a8e:	bf00      	nop

08002a90 <STM_EVAL_LEDOn>:
  *     @arg LED4  
  * @retval None
  */
void STM_EVAL_LEDOn(Led_TypeDef Led)
{
  GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];
 8002a90:	f240 020c 	movw	r2, #12
 8002a94:	f642 4300 	movw	r3, #11264	; 0x2c00
 8002a98:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002a9c:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002aa0:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8002aa4:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 8002aa8:	8313      	strh	r3, [r2, #24]
 8002aaa:	4770      	bx	lr

08002aac <ANCAInit>:
	ANCAInit(AN_EN);
	ANCAInit(AN_CLK);
}

void ANCAInit(ANCA_TypeDef Anca)
{
 8002aac:	b510      	push	{r4, lr}
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(ANCA_CLK[Anca], ENABLE);
 8002aae:	f642 4308 	movw	r3, #11272	; 0x2c08
 8002ab2:	f6c0 0300 	movt	r3, #2048	; 0x800
	ANCAInit(AN_EN);
	ANCAInit(AN_CLK);
}

void ANCAInit(ANCA_TypeDef Anca)
{
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	4604      	mov	r4, r0
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(ANCA_CLK[Anca], ENABLE);
 8002aba:	2101      	movs	r1, #1
 8002abc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8002ac0:	f7ff ff04 	bl	80028cc <RCC_AHB1PeriphClockCmd>


  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = ANCA_PIN[Anca];
 8002ac4:	f642 4238 	movw	r2, #11320	; 0x2c38
 8002ac8:	f6c0 0200 	movt	r2, #2048	; 0x800
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_Init(ANCA_PORT[Anca], &GPIO_InitStructure);
 8002acc:	f240 0324 	movw	r3, #36	; 0x24
 8002ad0:	f2c2 0300 	movt	r3, #8192	; 0x2000
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(ANCA_CLK[Anca], ENABLE);


  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = ANCA_PIN[Anca];
 8002ad4:	f832 2014 	ldrh.w	r2, [r2, r4, lsl #1]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_Init(ANCA_PORT[Anca], &GPIO_InitStructure);
 8002ad8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(ANCA_CLK[Anca], ENABLE);


  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = ANCA_PIN[Anca];
 8002adc:	9200      	str	r2, [sp, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	f88d 3004 	strb.w	r3, [sp, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002ae4:	2200      	movs	r2, #0
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8002ae6:	f88d 3007 	strb.w	r3, [sp, #7]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_Init(ANCA_PORT[Anca], &GPIO_InitStructure);
 8002aea:	4669      	mov	r1, sp
  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = ANCA_PIN[Anca];
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002aec:	2302      	movs	r3, #2


  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = ANCA_PIN[Anca];
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002aee:	f88d 2006 	strb.w	r2, [sp, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002af2:	f88d 3005 	strb.w	r3, [sp, #5]
  GPIO_Init(ANCA_PORT[Anca], &GPIO_InitStructure);
 8002af6:	f7ff ff05 	bl	8002904 <GPIO_Init>
}
 8002afa:	b002      	add	sp, #8
 8002afc:	bd10      	pop	{r4, pc}
 8002afe:	bf00      	nop

08002b00 <ANCA_INIT_All>:
const uint32_t ANCA_CLK[ANCAn] = {CA_A_GPIO_CLK, CA_B_GPIO_CLK,
                                 CA_C_GPIO_CLK, CA_D_GPIO_CLK, CA_E_GPIO_CLK,
																 CA_F_GPIO_CLK, CA_G_GPIO_CLK, CA_DP_GPIO_CLK, CA_EN_GPIO_CLK, 
																 CA_CLK_GPIO_CLK, AN_EN_GPIO_CLK, AN_CLK_GPIO_CLK};

void ANCA_INIT_All() {
 8002b00:	b508      	push	{r3, lr}
	ANCAInit(A_COLON);
 8002b02:	2000      	movs	r0, #0
 8002b04:	f7ff ffd2 	bl	8002aac <ANCAInit>
	ANCAInit(B_DIGIT4);
 8002b08:	2001      	movs	r0, #1
 8002b0a:	f7ff ffcf 	bl	8002aac <ANCAInit>
	ANCAInit(C_DIGIT2);
 8002b0e:	2002      	movs	r0, #2
 8002b10:	f7ff ffcc 	bl	8002aac <ANCAInit>
	ANCAInit(D_ROT_ENC);
 8002b14:	2003      	movs	r0, #3
 8002b16:	f7ff ffc9 	bl	8002aac <ANCAInit>
	ANCAInit(E_R);
 8002b1a:	2004      	movs	r0, #4
 8002b1c:	f7ff ffc6 	bl	8002aac <ANCAInit>
	ANCAInit(F_DIGIT1);
 8002b20:	2005      	movs	r0, #5
 8002b22:	f7ff ffc3 	bl	8002aac <ANCAInit>
	ANCAInit(G_DIGIT3);
 8002b26:	2006      	movs	r0, #6
 8002b28:	f7ff ffc0 	bl	8002aac <ANCAInit>
	ANCAInit(DP_G);
 8002b2c:	2007      	movs	r0, #7
 8002b2e:	f7ff ffbd 	bl	8002aac <ANCAInit>
	ANCAInit(CA_EN);
 8002b32:	2008      	movs	r0, #8
 8002b34:	f7ff ffba 	bl	8002aac <ANCAInit>
	ANCAInit(CA_CLK);
 8002b38:	2009      	movs	r0, #9
 8002b3a:	f7ff ffb7 	bl	8002aac <ANCAInit>
	ANCAInit(AN_EN);
 8002b3e:	200a      	movs	r0, #10
 8002b40:	f7ff ffb4 	bl	8002aac <ANCAInit>
	ANCAInit(AN_CLK);
 8002b44:	200b      	movs	r0, #11
}
 8002b46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	ANCAInit(G_DIGIT3);
	ANCAInit(DP_G);
	ANCAInit(CA_EN);
	ANCAInit(CA_CLK);
	ANCAInit(AN_EN);
	ANCAInit(AN_CLK);
 8002b4a:	f7ff bfaf 	b.w	8002aac <ANCAInit>
 8002b4e:	bf00      	nop

08002b50 <queue>:
{
	
}

int queue(swevent_t * in) {
	if(tail < QSIZE){
 8002b50:	4a08      	ldr	r2, [pc, #32]	; (8002b74 <queue+0x24>)
 8002b52:	6813      	ldr	r3, [r2, #0]
 8002b54:	2b13      	cmp	r3, #19
void ANCA_Print_Ascii (char c, int digit)
{
	
}

int queue(swevent_t * in) {
 8002b56:	b410      	push	{r4}
	if(tail < QSIZE){
 8002b58:	d808      	bhi.n	8002b6c <queue+0x1c>
		//fifo[tail].pr = in->pr;
		//fifo[tail].sw = in->sw;
		//fifo[tail++].msec = in->msec;
		fifo[tail++] = *in;
 8002b5a:	6804      	ldr	r4, [r0, #0]
 8002b5c:	4806      	ldr	r0, [pc, #24]	; (8002b78 <queue+0x28>)
 8002b5e:	1c59      	adds	r1, r3, #1
 8002b60:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 8002b64:	6011      	str	r1, [r2, #0]
		return 0;
 8002b66:	2000      	movs	r0, #0
	} else {
		return -1;
	}
}
 8002b68:	bc10      	pop	{r4}
 8002b6a:	4770      	bx	lr
		//fifo[tail].sw = in->sw;
		//fifo[tail++].msec = in->msec;
		fifo[tail++] = *in;
		return 0;
	} else {
		return -1;
 8002b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b70:	e7fa      	b.n	8002b68 <queue+0x18>
 8002b72:	bf00      	nop
 8002b74:	200002d0 	.word	0x200002d0
 8002b78:	20000318 	.word	0x20000318

08002b7c <dequeue>:
	}
}

swevent_t dequeue() {
 8002b7c:	b430      	push	{r4, r5}
	unsigned int tmp = head, i;
	
	if(tail == 0) {
 8002b7e:	4c0c      	ldr	r4, [pc, #48]	; (8002bb0 <dequeue+0x34>)
 8002b80:	6822      	ldr	r2, [r4, #0]
 8002b82:	b17a      	cbz	r2, 8002ba4 <dequeue+0x28>
		KILL.pr = 1;
		KILL.sw = 20;
		return KILL;			// return an invalid switch event
	}
	
	swevent_t tmpsw = fifo[0];
 8002b84:	4b0b      	ldr	r3, [pc, #44]	; (8002bb4 <dequeue+0x38>)
	} else {
		return -1;
	}
}

swevent_t dequeue() {
 8002b86:	1f19      	subs	r1, r3, #4
	
	swevent_t tmpsw = fifo[0];
	
	//screw_it();
	
	for (i = 0; i < tail - 1; i++) {
 8002b88:	1e55      	subs	r5, r2, #1
		KILL.pr = 1;
		KILL.sw = 20;
		return KILL;			// return an invalid switch event
	}
	
	swevent_t tmpsw = fifo[0];
 8002b8a:	6818      	ldr	r0, [r3, #0]
	} else {
		return -1;
	}
}

swevent_t dequeue() {
 8002b8c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
	
	swevent_t tmpsw = fifo[0];
	
	//screw_it();
	
	for (i = 0; i < tail - 1; i++) {
 8002b90:	d005      	beq.n	8002b9e <dequeue+0x22>
		fifo[i] = fifo[i + 1];
 8002b92:	f853 2f04 	ldr.w	r2, [r3, #4]!
	
	swevent_t tmpsw = fifo[0];
	
	//screw_it();
	
	for (i = 0; i < tail - 1; i++) {
 8002b96:	428b      	cmp	r3, r1
		fifo[i] = fifo[i + 1];
 8002b98:	f843 2c04 	str.w	r2, [r3, #-4]
	
	swevent_t tmpsw = fifo[0];
	
	//screw_it();
	
	for (i = 0; i < tail - 1; i++) {
 8002b9c:	d1f9      	bne.n	8002b92 <dequeue+0x16>
		fifo[i] = fifo[i + 1];
	}
	
	tail--;
 8002b9e:	6025      	str	r5, [r4, #0]
		head = 0; 
		tail = 0;
	}*/
	
	return tmpsw;
}
 8002ba0:	bc30      	pop	{r4, r5}
 8002ba2:	4770      	bx	lr
	
	if(tail == 0) {
		swevent_t KILL;
		KILL.pr = 1;
		KILL.sw = 20;
		return KILL;			// return an invalid switch event
 8002ba4:	2001      	movs	r0, #1
 8002ba6:	2314      	movs	r3, #20
 8002ba8:	f363 0047 	bfi	r0, r3, #1, #7
 8002bac:	e7f8      	b.n	8002ba0 <dequeue+0x24>
 8002bae:	bf00      	nop
 8002bb0:	200002d0 	.word	0x200002d0
 8002bb4:	20000318 	.word	0x20000318

08002bb8 <getswitch>:
	
	return tmpsw;
}

swevent_t getswitch(void)
{
 8002bb8:	b508      	push	{r3, lr}
	swevent_t out = dequeue();
 8002bba:	f7ff ffdf 	bl	8002b7c <dequeue>
		vdisplay[2] = out.sw;
	}*/
	
	//vdisplay[2] = 3;
	return out;
}
 8002bbe:	bd08      	pop	{r3, pc}

08002bc0 <synthstuff>:
	);
	}*/
}

void synthstuff(void)
{
 8002bc0:	b508      	push	{r3, lr}
	swevent_t out = getswitch();
 8002bc2:	f7ff fff9 	bl	8002bb8 <getswitch>
	
	if(out.sw <= 13) {
 8002bc6:	f3c0 0346 	ubfx	r3, r0, #1, #7
 8002bca:	2b0d      	cmp	r3, #13
 8002bcc:	dc06      	bgt.n	8002bdc <synthstuff+0x1c>
		if(out.pr != 0) {	// pressed
 8002bce:	f010 0001 	ands.w	r0, r0, #1
 8002bd2:	d104      	bne.n	8002bde <synthstuff+0x1e>
			vdisplay[0] = out.sw;
		} else {					// released
			/*switch(out.sw) {
				case 2 : note[0] = 0;
			}*/
			note[0] = 0;
 8002bd4:	4b04      	ldr	r3, [pc, #16]	; (8002be8 <synthstuff+0x28>)
 8002bd6:	6018      	str	r0, [r3, #0]
			vdisplay[0] = 0;
 8002bd8:	4b04      	ldr	r3, [pc, #16]	; (8002bec <synthstuff+0x2c>)
 8002bda:	6018      	str	r0, [r3, #0]
 8002bdc:	bd08      	pop	{r3, pc}
	if(out.sw <= 13) {
		if(out.pr != 0) {	// pressed
			/*switch(out.sw) {
				case 1 : note[0] = 1;
			}*/
			note[0] = out.sw;
 8002bde:	4a02      	ldr	r2, [pc, #8]	; (8002be8 <synthstuff+0x28>)
 8002be0:	6013      	str	r3, [r2, #0]
			vdisplay[0] = out.sw;
 8002be2:	4a02      	ldr	r2, [pc, #8]	; (8002bec <synthstuff+0x2c>)
 8002be4:	6013      	str	r3, [r2, #0]
 8002be6:	bd08      	pop	{r3, pc}
 8002be8:	2000001c 	.word	0x2000001c
 8002bec:	200002a4 	.word	0x200002a4

08002bf0 <GPIO_CLK>:
 8002bf0:	00000008 00000008 00000008 00000008     ................

08002c00 <GPIO_PIN>:
 8002c00:	20001000 80004000                       ... .@..

08002c08 <ANCA_CLK>:
 8002c08:	00000004 00000002 00000001 00000002     ................
 8002c18:	00000002 00000004 00000004 00000002     ................
 8002c28:	00000004 00000008 00000002 00000004     ................

08002c38 <ANCA_PIN>:
 8002c38:	00020020 00200002 00040800 00010010      ..... .........
 8002c48:	00040002 08000010                       ........
